// Autogenerated from Pigeon (v20.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class FlutterTripSimulatorError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "FlutterTripSimulatorError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? FlutterTripSimulatorError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum PigeonPresetTrip: Int {
  case shortTrip = 0
  case mixedTrip = 1
  case cityTrip = 2
  case suburbanTrip = 3
  case highwayTrip = 4
  case trainTrip = 5
  case boatTrip = 6
  case busTrip = 7
  case tripWithCrashConfirmed10KmH = 8
  case tripWithCrashConfirmed20KmH = 9
  case tripWithCrashConfirmed30KmH = 10
  case tripWithCrashUnconfirmed0KmH = 11
  case tripWithCrashConfirmed30KmHStillDriving = 12
}
private class IOSTripSimulatorApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      var enumResult: PigeonPresetTrip? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = PigeonPresetTrip(rawValue: enumResultAsInt)
      }
      return enumResult
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class IOSTripSimulatorApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PigeonPresetTrip {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else {
      super.writeValue(value)
    }
  }
}

private class IOSTripSimulatorApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return IOSTripSimulatorApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return IOSTripSimulatorApiPigeonCodecWriter(data: data)
  }
}

class IOSTripSimulatorApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = IOSTripSimulatorApiPigeonCodec(readerWriter: IOSTripSimulatorApiPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol IOSTripSimulatorApi {
  func start(presetTrip: PigeonPresetTrip) throws
  func stop() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class IOSTripSimulatorApiSetup {
  static var codec: FlutterStandardMessageCodec { IOSTripSimulatorApiPigeonCodec.shared }
  /// Sets up an instance of `IOSTripSimulatorApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: IOSTripSimulatorApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let startChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_trip_simulator_package.IOSTripSimulatorApi.start\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let presetTripArg = args[0] as! PigeonPresetTrip
        do {
          try api.start(presetTrip: presetTripArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startChannel.setMessageHandler(nil)
    }
    let stopChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_trip_simulator_package.IOSTripSimulatorApi.stop\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopChannel.setMessageHandler { _, reply in
        do {
          try api.stop()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopChannel.setMessageHandler(nil)
    }
  }
}
