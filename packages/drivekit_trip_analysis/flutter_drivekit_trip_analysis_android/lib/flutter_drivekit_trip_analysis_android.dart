import 'package:flutter/foundation.dart';
import 'package:flutter_drivekit_trip_analysis_android/src/adapter.dart';
import 'package:flutter_drivekit_trip_analysis_android/src/trip_analysis_api.g.dart';
import 'package:flutter_drivekit_trip_analysis_platform_interface/flutter_drivekit_trip_analysis_platform_interface.dart';

/// The Android implementation of [DrivekitTripAnalysisPlatform].
class DrivekitTripAnalysisAndroid extends DrivekitTripAnalysisPlatform
    implements FlutterTripAnalysisApi {
  /// Creates a new instance of [DrivekitTripAnalysisAndroid].
  /// The optional [androidTripAnalysisApi] parameter is used for
  /// dependency injection in tests.
  DrivekitTripAnalysisAndroid({AndroidTripAnalysisApi? androidTripAnalysisApi})
      : androidTripAnalysisApi =
            androidTripAnalysisApi ?? AndroidTripAnalysisApi();

  /// Registers this class as the default instance of
  /// [DrivekitTripAnalysisPlatform]
  static void registerWith() {
    DrivekitTripAnalysisPlatform.instance = DrivekitTripAnalysisAndroid();
  }

  /// The instance of [AndroidTripAnalysisApi], a class that provides
  /// access to the native methods via a method channel generated by pigeon.
  @visibleForTesting
  final AndroidTripAnalysisApi androidTripAnalysisApi;

  @override
  void initializePlatform() {
    FlutterTripAnalysisApi.setUp(this);
  }

  final List<TripListener> _listeners = [];

  @override
  Future<void> activateAutoStart(bool activate) =>
      androidTripAnalysisApi.activateAutoStart(activate);

  @override
  Future<void> activateCrashDetection(bool activate) =>
      androidTripAnalysisApi.activateCrashDetection(activate);

  @override
  Future<void> startTrip() => androidTripAnalysisApi.startTrip();

  @override
  Future<void> stopTrip() => androidTripAnalysisApi.stopTrip();

  @override
  Future<void> cancelTrip() => androidTripAnalysisApi.cancelTrip();

  @override
  Future<bool> isTripRunning() => androidTripAnalysisApi.isTripRunning();

  @override
  Future<void> setMonitorPotentialTripStart(bool activate) =>
      androidTripAnalysisApi.setMonitorPotentialTripStart(activate);

  @override
  Future<bool> getMonitorPotentialTripStart() =>
      androidTripAnalysisApi.getMonitorPotentialTripStart();

  @override
  Future<void> setVehicle(Vehicle vehicle) =>
      androidTripAnalysisApi.setVehicle(vehicle.toPigeonImplementation());

  @override
  void addTripListener(TripListener listener) => _listeners.add(listener);

  @override
  void removeTripListener(TripListener listener) => _listeners.remove(listener);

  @override
  void removeAllTripListeners() => _listeners.clear();

  @override
  void beaconDetected() {
    for (final listener in _listeners) {
      listener.beaconDetected?.call();
    }
  }

  @override
  void crashDetected(PigeonDKCrashInfo crashInfo) {
    // TODO: implement crashDetected
  }

  @override
  void crashFeedbackSent(
    PigeonDKCrashInfo crashInfo,
    PigeonDKCrashFeedbackType feedbackType,
    PigeonDKCrashFeedbackSeverity severity,
  ) {
    // TODO: implement crashFeedbackSent
  }

  @override
  void sdkStateChanged(PigeonState state) {
    // TODO: implement sdkStateChanged
  }

  @override
  void tripCancelled(PigeonCancelTrip cancelTrip) {
    // TODO: implement tripCancelled
  }

  @override
  void tripFinished(
    PigeonPostGeneric post,
    PigeonPostGenericResponse response,
  ) {
    // TODO: implement tripFinished
  }

  @override
  void tripPoint(PigeonTripPoint tripPoint) {
    // TODO: implement tripPoint
  }

  @override
  void tripSavedForRepost() {
    // TODO: implement tripSavedForRepost
  }

  @override
  void tripStarted(PigeonStartMode startMode) {
    // TODO: implement tripStarted
  }
}
