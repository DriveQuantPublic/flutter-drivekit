// Autogenerated from Pigeon (v20.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse(
    {Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum PigeonStartMode {
  gps,
  beacon,
  manual,
  geozone,
  bluetooth,
  unknownBluetooth,
  bicycleActivity,
  connectedCar,
}

enum PigeonCancelTrip {
  user,
  highspeed,
  noSpeed,
  noBeacon,
  missingConfiguration,
  noGpsData,
  reset,
  beaconNoSpeed,
  noBluetoothDevice,
  bluetoothDeviceNoSpeed,
}

enum PigeonState {
  inactive,
  starting,
  running,
  stopping,
  sending,
}

enum PigeonDKCrashFeedbackType {
  noCrash,
  crashConfirmed,
  noFeedback,
}

enum PigeonDKCrashFeedbackSeverity {
  none,
  minor,
  critical,
}

enum PigeonCrashStatus {
  unconfirmed,
  confirmed,
}

enum PigeonTripResponseStatusType {
  tripValid,
  tripError,
}

enum PigeonTripResponseInfo {
  engineSpeedNotAvailable,
  engineSpeedIsNull,
  noVehicleCharacteristics,
  dataLoss,
  distanceTooShort,
  invalidVehicleCharacteristics,
  invalidVehicleId,
}

enum PigeonTripResponseError {
  noAccountSet,
  noRouteObjectFound,
  invalidRouteDefinition,
  noVelocityData,
  invalidSamplingPeriod,
  invalidCustomerId,
  noDateFound,
  maxDailyRequestNumberReached,
  dataError,
  invalidRouteVectors,
  missingBeacon,
  invalidBeacon,
  duplicateTrip,
  insufficientGpsData,
  userDisabled,
  invalidUser,
  invalidGpsData,
  invalidTrip,
  accountLimitReached,
  unknownError,
}

class PigeonVehicle {
  PigeonVehicle({
    this.carTypeIndex = 1,
    this.carEngineIndex = 1,
    this.carPower = 150,
    this.carMass = 1400,
    this.carGearboxIndex = 2,
    this.carConsumption = 4.5,
    this.carAutoGearboxNumber = 0,
    this.engineDisplacement = 1200,
    this.carPassengers = 1,
    this.dqIndex,
    this.sra,
    this.frontTireSize,
    this.rearTireSize,
    this.length = 4.5,
    this.width = 1.8,
    this.height = 1.45,
    this.engineCylinderNb = 4,
    this.driveWheels = 0,
  });

  int carTypeIndex;

  int carEngineIndex;

  int carPower;

  int carMass;

  int carGearboxIndex;

  double carConsumption;

  int carAutoGearboxNumber;

  int engineDisplacement;

  int carPassengers;

  String? dqIndex;

  String? sra;

  String? frontTireSize;

  String? rearTireSize;

  double length;

  double width;

  double height;

  int engineCylinderNb;

  int driveWheels;

  Object encode() {
    return <Object?>[
      carTypeIndex,
      carEngineIndex,
      carPower,
      carMass,
      carGearboxIndex,
      carConsumption,
      carAutoGearboxNumber,
      engineDisplacement,
      carPassengers,
      dqIndex,
      sra,
      frontTireSize,
      rearTireSize,
      length,
      width,
      height,
      engineCylinderNb,
      driveWheels,
    ];
  }

  static PigeonVehicle decode(Object result) {
    result as List<Object?>;
    return PigeonVehicle(
      carTypeIndex: result[0]! as int,
      carEngineIndex: result[1]! as int,
      carPower: result[2]! as int,
      carMass: result[3]! as int,
      carGearboxIndex: result[4]! as int,
      carConsumption: result[5]! as double,
      carAutoGearboxNumber: result[6]! as int,
      engineDisplacement: result[7]! as int,
      carPassengers: result[8]! as int,
      dqIndex: result[9] as String?,
      sra: result[10] as String?,
      frontTireSize: result[11] as String?,
      rearTireSize: result[12] as String?,
      length: result[13]! as double,
      width: result[14]! as double,
      height: result[15]! as double,
      engineCylinderNb: result[16]! as int,
      driveWheels: result[17]! as int,
    );
  }
}

class PigeonTripPoint {
  PigeonTripPoint({
    required this.latitude,
    required this.longitude,
    required this.speed,
    required this.accuracy,
    required this.elevation,
    required this.distance,
    required this.heading,
    required this.duration,
  });

  double latitude;

  double longitude;

  double speed;

  double accuracy;

  double elevation;

  double distance;

  double heading;

  double duration;

  Object encode() {
    return <Object?>[
      latitude,
      longitude,
      speed,
      accuracy,
      elevation,
      distance,
      heading,
      duration,
    ];
  }

  static PigeonTripPoint decode(Object result) {
    result as List<Object?>;
    return PigeonTripPoint(
      latitude: result[0]! as double,
      longitude: result[1]! as double,
      speed: result[2]! as double,
      accuracy: result[3]! as double,
      elevation: result[4]! as double,
      distance: result[5]! as double,
      heading: result[6]! as double,
      duration: result[7]! as double,
    );
  }
}

class PigeonDKCrashInfo {
  PigeonDKCrashInfo({
    this.crashId,
    this.date,
    this.status,
    required this.probability,
    required this.latitude,
    required this.longitude,
    required this.velocity,
  });

  String? crashId;

  String? date;

  PigeonCrashStatus? status;

  int probability;

  double latitude;

  double longitude;

  double velocity;

  Object encode() {
    return <Object?>[
      crashId,
      date,
      status,
      probability,
      latitude,
      longitude,
      velocity,
    ];
  }

  static PigeonDKCrashInfo decode(Object result) {
    result as List<Object?>;
    return PigeonDKCrashInfo(
      crashId: result[0] as String?,
      date: result[1] as String?,
      status: result[2] as PigeonCrashStatus?,
      probability: result[3]! as int,
      latitude: result[4]! as double,
      longitude: result[5]! as double,
      velocity: result[6]! as double,
    );
  }
}

class PigeonAdvancedEcoDriving {
  PigeonAdvancedEcoDriving({
    required this.ecoDrivingContext,
  });

  List<PigeonEcoDrivingContext?> ecoDrivingContext;

  Object encode() {
    return <Object?>[
      ecoDrivingContext,
    ];
  }

  static PigeonAdvancedEcoDriving decode(Object result) {
    result as List<Object?>;
    return PigeonAdvancedEcoDriving(
      ecoDrivingContext:
          (result[0] as List<Object?>?)!.cast<PigeonEcoDrivingContext?>(),
    );
  }
}

class PigeonAdvancedFuelEstimation {
  PigeonAdvancedFuelEstimation({
    required this.fuelEstimationContext,
  });

  List<PigeonFuelEstimationContext?> fuelEstimationContext;

  Object encode() {
    return <Object?>[
      fuelEstimationContext,
    ];
  }

  static PigeonAdvancedFuelEstimation decode(Object result) {
    result as List<Object?>;
    return PigeonAdvancedFuelEstimation(
      fuelEstimationContext:
          (result[0] as List<Object?>?)!.cast<PigeonFuelEstimationContext?>(),
    );
  }
}

class PigeonAdvancedSafety {
  PigeonAdvancedSafety({
    required this.safetyContext,
  });

  List<PigeonSafetyContext?> safetyContext;

  Object encode() {
    return <Object?>[
      safetyContext,
    ];
  }

  static PigeonAdvancedSafety decode(Object result) {
    result as List<Object?>;
    return PigeonAdvancedSafety(
      safetyContext:
          (result[0] as List<Object?>?)!.cast<PigeonSafetyContext?>(),
    );
  }
}

class PigeonBrakeWear {
  PigeonBrakeWear({
    required this.frontBrakeAutonomy,
    required this.frontBrakeDistance,
    required this.frontBrakePadWear,
    required this.frontBrakeTotalWear,
    required this.frontBrakeWearRate,
    required this.rearBrakeAutonomy,
    required this.rearBrakeDistance,
    required this.rearBrakePadWear,
    required this.rearBrakeTotalWear,
    required this.rearBrakeWearRate,
  });

  int frontBrakeAutonomy;

  int frontBrakeDistance;

  int frontBrakePadWear;

  int frontBrakeTotalWear;

  int frontBrakeWearRate;

  int rearBrakeAutonomy;

  int rearBrakeDistance;

  int rearBrakePadWear;

  int rearBrakeTotalWear;

  int rearBrakeWearRate;

  Object encode() {
    return <Object?>[
      frontBrakeAutonomy,
      frontBrakeDistance,
      frontBrakePadWear,
      frontBrakeTotalWear,
      frontBrakeWearRate,
      rearBrakeAutonomy,
      rearBrakeDistance,
      rearBrakePadWear,
      rearBrakeTotalWear,
      rearBrakeWearRate,
    ];
  }

  static PigeonBrakeWear decode(Object result) {
    result as List<Object?>;
    return PigeonBrakeWear(
      frontBrakeAutonomy: result[0]! as int,
      frontBrakeDistance: result[1]! as int,
      frontBrakePadWear: result[2]! as int,
      frontBrakeTotalWear: result[3]! as int,
      frontBrakeWearRate: result[4]! as int,
      rearBrakeAutonomy: result[5]! as int,
      rearBrakeDistance: result[6]! as int,
      rearBrakePadWear: result[7]! as int,
      rearBrakeTotalWear: result[8]! as int,
      rearBrakeWearRate: result[9]! as int,
    );
  }
}

class PigeonCall {
  PigeonCall({
    required this.id,
    required this.start,
    required this.end,
    required this.duration,
    required this.durationPercent,
    required this.distance,
    required this.distancePercent,
    required this.type,
    required this.audioSystem,
    this.audioInput,
    this.audioOutput,
    this.audioName,
    required this.bluetoothClass,
    required this.isForbidden,
  });

  int id;

  double start;

  double end;

  int duration;

  int durationPercent;

  int distance;

  int distancePercent;

  String type;

  String audioSystem;

  String? audioInput;

  String? audioOutput;

  String? audioName;

  int bluetoothClass;

  bool isForbidden;

  Object encode() {
    return <Object?>[
      id,
      start,
      end,
      duration,
      durationPercent,
      distance,
      distancePercent,
      type,
      audioSystem,
      audioInput,
      audioOutput,
      audioName,
      bluetoothClass,
      isForbidden,
    ];
  }

  static PigeonCall decode(Object result) {
    result as List<Object?>;
    return PigeonCall(
      id: result[0]! as int,
      start: result[1]! as double,
      end: result[2]! as double,
      duration: result[3]! as int,
      durationPercent: result[4]! as int,
      distance: result[5]! as int,
      distancePercent: result[6]! as int,
      type: result[7]! as String,
      audioSystem: result[8]! as String,
      audioInput: result[9] as String?,
      audioOutput: result[10] as String?,
      audioName: result[11] as String?,
      bluetoothClass: result[12]! as int,
      isForbidden: result[13]! as bool,
    );
  }
}

class PigeonAdvancedEnergyEstimation {
  PigeonAdvancedEnergyEstimation({
    required this.energy,
    required this.energyConsumption,
    required this.energyOpti,
    required this.energyOptiConsumption,
    required this.duration,
    required this.distance,
    required this.contextId,
  });

  double energy;

  double energyConsumption;

  double energyOpti;

  double energyOptiConsumption;

  double duration;

  double distance;

  int contextId;

  Object encode() {
    return <Object?>[
      energy,
      energyConsumption,
      energyOpti,
      energyOptiConsumption,
      duration,
      distance,
      contextId,
    ];
  }

  static PigeonAdvancedEnergyEstimation decode(Object result) {
    result as List<Object?>;
    return PigeonAdvancedEnergyEstimation(
      energy: result[0]! as double,
      energyConsumption: result[1]! as double,
      energyOpti: result[2]! as double,
      energyOptiConsumption: result[3]! as double,
      duration: result[4]! as double,
      distance: result[5]! as double,
      contextId: result[6]! as int,
    );
  }
}

class PigeonEnergyEstimation {
  PigeonEnergyEstimation({
    required this.energy,
    required this.energyConsumption,
    required this.energyOpti,
    required this.energyOptiConsumption,
  });

  double energy;

  double energyConsumption;

  double energyOpti;

  double energyOptiConsumption;

  Object encode() {
    return <Object?>[
      energy,
      energyConsumption,
      energyOpti,
      energyOptiConsumption,
    ];
  }

  static PigeonEnergyEstimation decode(Object result) {
    result as List<Object?>;
    return PigeonEnergyEstimation(
      energy: result[0]! as double,
      energyConsumption: result[1]! as double,
      energyOpti: result[2]! as double,
      energyOptiConsumption: result[3]! as double,
    );
  }
}

class PigeonEcoDriving {
  PigeonEcoDriving({
    required this.score,
    required this.scoreAccel,
    required this.scoreMain,
    required this.scoreDecel,
    required this.stdDevAccel,
    required this.stdDevMain,
    required this.stdDevDecel,
    required this.energyClass,
  });

  double score;

  double scoreAccel;

  double scoreMain;

  double scoreDecel;

  double stdDevAccel;

  double stdDevMain;

  double stdDevDecel;

  int energyClass;

  Object encode() {
    return <Object?>[
      score,
      scoreAccel,
      scoreMain,
      scoreDecel,
      stdDevAccel,
      stdDevMain,
      stdDevDecel,
      energyClass,
    ];
  }

  static PigeonEcoDriving decode(Object result) {
    result as List<Object?>;
    return PigeonEcoDriving(
      score: result[0]! as double,
      scoreAccel: result[1]! as double,
      scoreMain: result[2]! as double,
      scoreDecel: result[3]! as double,
      stdDevAccel: result[4]! as double,
      stdDevMain: result[5]! as double,
      stdDevDecel: result[6]! as double,
      energyClass: result[7]! as int,
    );
  }
}

class PigeonFuelEstimation {
  PigeonFuelEstimation({
    required this.co2Mass,
    required this.co2Emission,
    required this.fuelVolume,
    required this.fuelConsumption,
    required this.idleFuelVolume,
    required this.idleFuelPercentage,
    required this.idleFuelConsumption,
    required this.idleCo2Emission,
    required this.idleCo2Mass,
    required this.engineTempStatus,
    required this.coldFuelVolume,
  });

  double co2Mass;

  double co2Emission;

  double fuelVolume;

  double fuelConsumption;

  double idleFuelVolume;

  double idleFuelPercentage;

  double idleFuelConsumption;

  double idleCo2Emission;

  double idleCo2Mass;

  bool engineTempStatus;

  double coldFuelVolume;

  Object encode() {
    return <Object?>[
      co2Mass,
      co2Emission,
      fuelVolume,
      fuelConsumption,
      idleFuelVolume,
      idleFuelPercentage,
      idleFuelConsumption,
      idleCo2Emission,
      idleCo2Mass,
      engineTempStatus,
      coldFuelVolume,
    ];
  }

  static PigeonFuelEstimation decode(Object result) {
    result as List<Object?>;
    return PigeonFuelEstimation(
      co2Mass: result[0]! as double,
      co2Emission: result[1]! as double,
      fuelVolume: result[2]! as double,
      fuelConsumption: result[3]! as double,
      idleFuelVolume: result[4]! as double,
      idleFuelPercentage: result[5]! as double,
      idleFuelConsumption: result[6]! as double,
      idleCo2Emission: result[7]! as double,
      idleCo2Mass: result[8]! as double,
      engineTempStatus: result[9]! as bool,
      coldFuelVolume: result[10]! as double,
    );
  }
}

class PigeonSafety {
  PigeonSafety({
    required this.nbAdh,
    required this.nbAccel,
    required this.nbDecel,
    required this.nbAdhCrit,
    required this.nbAccelCrit,
    required this.nbDecelCrit,
    required this.safetyScore,
  });

  int nbAdh;

  int nbAccel;

  int nbDecel;

  int nbAdhCrit;

  int nbAccelCrit;

  int nbDecelCrit;

  double safetyScore;

  Object encode() {
    return <Object?>[
      nbAdh,
      nbAccel,
      nbDecel,
      nbAdhCrit,
      nbAccelCrit,
      nbDecelCrit,
      safetyScore,
    ];
  }

  static PigeonSafety decode(Object result) {
    result as List<Object?>;
    return PigeonSafety(
      nbAdh: result[0]! as int,
      nbAccel: result[1]! as int,
      nbDecel: result[2]! as int,
      nbAdhCrit: result[3]! as int,
      nbAccelCrit: result[4]! as int,
      nbDecelCrit: result[5]! as int,
      safetyScore: result[6]! as double,
    );
  }
}

class PigeonPollutants {
  PigeonPollutants({
    required this.co,
    required this.hc,
    required this.nox,
    required this.soot,
  });

  double co;

  double hc;

  double nox;

  double soot;

  Object encode() {
    return <Object?>[
      co,
      hc,
      nox,
      soot,
    ];
  }

  static PigeonPollutants decode(Object result) {
    result as List<Object?>;
    return PigeonPollutants(
      co: result[0]! as double,
      hc: result[1]! as double,
      nox: result[2]! as double,
      soot: result[3]! as double,
    );
  }
}

class PigeonTireWear {
  PigeonTireWear({
    required this.frontTireAutonomy,
    required this.frontTireDistance,
    required this.frontTireTotalWear,
    required this.frontTireWear,
    required this.frontTireWearRate,
    required this.rearTireAutonomy,
    required this.rearTireDistance,
    required this.rearTireTotalWear,
    required this.rearTireWear,
    required this.rearTireWearRate,
  });

  int frontTireAutonomy;

  int frontTireDistance;

  int frontTireTotalWear;

  int frontTireWear;

  int frontTireWearRate;

  int rearTireAutonomy;

  int rearTireDistance;

  int rearTireTotalWear;

  int rearTireWear;

  int rearTireWearRate;

  Object encode() {
    return <Object?>[
      frontTireAutonomy,
      frontTireDistance,
      frontTireTotalWear,
      frontTireWear,
      frontTireWearRate,
      rearTireAutonomy,
      rearTireDistance,
      rearTireTotalWear,
      rearTireWear,
      rearTireWearRate,
    ];
  }

  static PigeonTireWear decode(Object result) {
    result as List<Object?>;
    return PigeonTireWear(
      frontTireAutonomy: result[0]! as int,
      frontTireDistance: result[1]! as int,
      frontTireTotalWear: result[2]! as int,
      frontTireWear: result[3]! as int,
      frontTireWearRate: result[4]! as int,
      rearTireAutonomy: result[5]! as int,
      rearTireDistance: result[6]! as int,
      rearTireTotalWear: result[7]! as int,
      rearTireWear: result[8]! as int,
      rearTireWearRate: result[9]! as int,
    );
  }
}

class PigeonDriverDistraction {
  PigeonDriverDistraction({
    required this.nbUnlock,
    required this.durationUnlock,
    required this.durationPercentUnlock,
    required this.distanceUnlock,
    required this.distancePercentUnlock,
    required this.score,
    this.scoreUnlock,
    this.scoreCall,
  });

  int nbUnlock;

  double durationUnlock;

  double durationPercentUnlock;

  double distanceUnlock;

  double distancePercentUnlock;

  double score;

  double? scoreUnlock;

  double? scoreCall;

  Object encode() {
    return <Object?>[
      nbUnlock,
      durationUnlock,
      durationPercentUnlock,
      distanceUnlock,
      distancePercentUnlock,
      score,
      scoreUnlock,
      scoreCall,
    ];
  }

  static PigeonDriverDistraction decode(Object result) {
    result as List<Object?>;
    return PigeonDriverDistraction(
      nbUnlock: result[0]! as int,
      durationUnlock: result[1]! as double,
      durationPercentUnlock: result[2]! as double,
      distanceUnlock: result[3]! as double,
      distancePercentUnlock: result[4]! as double,
      score: result[5]! as double,
      scoreUnlock: result[6] as double?,
      scoreCall: result[7] as double?,
    );
  }
}

class PigeonItineraryData {
  PigeonItineraryData({
    this.startDate,
    this.endDate,
    this.departureCity,
    this.arrivalCity,
    this.departureAddress,
    this.arrivalAddress,
  });

  String? startDate;

  String? endDate;

  String? departureCity;

  String? arrivalCity;

  String? departureAddress;

  String? arrivalAddress;

  Object encode() {
    return <Object?>[
      startDate,
      endDate,
      departureCity,
      arrivalCity,
      departureAddress,
      arrivalAddress,
    ];
  }

  static PigeonItineraryData decode(Object result) {
    result as List<Object?>;
    return PigeonItineraryData(
      startDate: result[0] as String?,
      endDate: result[1] as String?,
      departureCity: result[2] as String?,
      arrivalCity: result[3] as String?,
      departureAddress: result[4] as String?,
      arrivalAddress: result[5] as String?,
    );
  }
}

class PigeonLogbook {
  PigeonLogbook({
    required this.status,
    this.updateDate,
  });

  int status;

  String? updateDate;

  Object encode() {
    return <Object?>[
      status,
      updateDate,
    ];
  }

  static PigeonLogbook decode(Object result) {
    result as List<Object?>;
    return PigeonLogbook(
      status: result[0]! as int,
      updateDate: result[1] as String?,
    );
  }
}

class PigeonSafetyEvent {
  PigeonSafetyEvent({
    required this.time,
    required this.longitude,
    required this.latitude,
    required this.velocity,
    required this.heading,
    required this.elevation,
    required this.distance,
    required this.type,
    required this.level,
    required this.value,
  });

  double time;

  double longitude;

  double latitude;

  double velocity;

  double heading;

  double elevation;

  double distance;

  int type;

  int level;

  double value;

  Object encode() {
    return <Object?>[
      time,
      longitude,
      latitude,
      velocity,
      heading,
      elevation,
      distance,
      type,
      level,
      value,
    ];
  }

  static PigeonSafetyEvent decode(Object result) {
    result as List<Object?>;
    return PigeonSafetyEvent(
      time: result[0]! as double,
      longitude: result[1]! as double,
      latitude: result[2]! as double,
      velocity: result[3]! as double,
      heading: result[4]! as double,
      elevation: result[5]! as double,
      distance: result[6]! as double,
      type: result[7]! as int,
      level: result[8]! as int,
      value: result[9]! as double,
    );
  }
}

class PigeonSpeedingStatistics {
  PigeonSpeedingStatistics({
    required this.distance,
    required this.duration,
    required this.speedingDistance,
    required this.speedingDuration,
    required this.score,
  });

  int distance;

  int duration;

  int speedingDistance;

  int speedingDuration;

  double score;

  Object encode() {
    return <Object?>[
      distance,
      duration,
      speedingDistance,
      speedingDuration,
      score,
    ];
  }

  static PigeonSpeedingStatistics decode(Object result) {
    result as List<Object?>;
    return PigeonSpeedingStatistics(
      distance: result[0]! as int,
      duration: result[1]! as int,
      speedingDistance: result[2]! as int,
      speedingDuration: result[3]! as int,
      score: result[4]! as double,
    );
  }
}

class PigeonEcoDrivingContext {
  PigeonEcoDrivingContext({
    required this.contextId,
    required this.distance,
    required this.duration,
    required this.efficiencyScore,
    required this.scoreAccel,
    required this.scoreMain,
    required this.scoreDecel,
  });

  int contextId;

  double distance;

  double duration;

  double efficiencyScore;

  double scoreAccel;

  double scoreMain;

  double scoreDecel;

  Object encode() {
    return <Object?>[
      contextId,
      distance,
      duration,
      efficiencyScore,
      scoreAccel,
      scoreMain,
      scoreDecel,
    ];
  }

  static PigeonEcoDrivingContext decode(Object result) {
    result as List<Object?>;
    return PigeonEcoDrivingContext(
      contextId: result[0]! as int,
      distance: result[1]! as double,
      duration: result[2]! as double,
      efficiencyScore: result[3]! as double,
      scoreAccel: result[4]! as double,
      scoreMain: result[5]! as double,
      scoreDecel: result[6]! as double,
    );
  }
}

class PigeonFuelEstimationContext {
  PigeonFuelEstimationContext({
    required this.contextId,
    required this.distance,
    required this.duration,
    required this.co2Mass,
    required this.co2Emission,
    required this.fuelVolume,
    required this.fuelConsumption,
  });

  int contextId;

  double distance;

  double duration;

  double co2Mass;

  double co2Emission;

  double fuelVolume;

  double fuelConsumption;

  Object encode() {
    return <Object?>[
      contextId,
      distance,
      duration,
      co2Mass,
      co2Emission,
      fuelVolume,
      fuelConsumption,
    ];
  }

  static PigeonFuelEstimationContext decode(Object result) {
    result as List<Object?>;
    return PigeonFuelEstimationContext(
      contextId: result[0]! as int,
      distance: result[1]! as double,
      duration: result[2]! as double,
      co2Mass: result[3]! as double,
      co2Emission: result[4]! as double,
      fuelVolume: result[5]! as double,
      fuelConsumption: result[6]! as double,
    );
  }
}

class PigeonSafetyContext {
  PigeonSafetyContext({
    required this.contextId,
    required this.distance,
    required this.duration,
    required this.nbAdh,
    required this.nbAccel,
    required this.nbDecel,
    required this.nbAdhCrit,
    required this.nbAccelCrit,
    required this.nbDecelCrit,
    required this.safetyScore,
  });

  int contextId;

  double distance;

  double duration;

  int nbAdh;

  int nbAccel;

  int nbDecel;

  int nbAdhCrit;

  int nbAccelCrit;

  int nbDecelCrit;

  double safetyScore;

  Object encode() {
    return <Object?>[
      contextId,
      distance,
      duration,
      nbAdh,
      nbAccel,
      nbDecel,
      nbAdhCrit,
      nbAccelCrit,
      nbDecelCrit,
      safetyScore,
    ];
  }

  static PigeonSafetyContext decode(Object result) {
    result as List<Object?>;
    return PigeonSafetyContext(
      contextId: result[0]! as int,
      distance: result[1]! as double,
      duration: result[2]! as double,
      nbAdh: result[3]! as int,
      nbAccel: result[4]! as int,
      nbDecel: result[5]! as int,
      nbAdhCrit: result[6]! as int,
      nbAccelCrit: result[7]! as int,
      nbDecelCrit: result[8]! as int,
      safetyScore: result[9]! as double,
    );
  }
}

class PigeonSpeedLimitContext {
  PigeonSpeedLimitContext({
    required this.speedLimit,
    required this.distance,
    required this.duration,
    required this.speedingDistance,
    required this.speedingDuration,
    required this.score,
  });

  int speedLimit;

  int distance;

  int duration;

  int speedingDistance;

  int speedingDuration;

  double score;

  Object encode() {
    return <Object?>[
      speedLimit,
      distance,
      duration,
      speedingDistance,
      speedingDuration,
      score,
    ];
  }

  static PigeonSpeedLimitContext decode(Object result) {
    result as List<Object?>;
    return PigeonSpeedLimitContext(
      speedLimit: result[0]! as int,
      distance: result[1]! as int,
      duration: result[2]! as int,
      speedingDistance: result[3]! as int,
      speedingDuration: result[4]! as int,
      score: result[5]! as double,
    );
  }
}

class PigeonTripResponseStatus {
  PigeonTripResponseStatus({
    required this.status,
    this.itinId,
    required this.hasSafetyAndEcoDrivingScore,
    required this.info,
    this.error,
    this.trip,
  });

  PigeonTripResponseStatusType status;

  String? itinId;

  bool hasSafetyAndEcoDrivingScore;

  List<PigeonTripResponseInfoItem?> info;

  PigeonTripResponseError? error;

  PigeonTrip? trip;

  Object encode() {
    return <Object?>[
      status,
      itinId,
      hasSafetyAndEcoDrivingScore,
      info,
      error,
      trip,
    ];
  }

  static PigeonTripResponseStatus decode(Object result) {
    result as List<Object?>;
    return PigeonTripResponseStatus(
      status: result[0]! as PigeonTripResponseStatusType,
      itinId: result[1] as String?,
      hasSafetyAndEcoDrivingScore: result[2]! as bool,
      info: (result[3] as List<Object?>?)!.cast<PigeonTripResponseInfoItem?>(),
      error: result[4] as PigeonTripResponseError?,
      trip: result[5] as PigeonTrip?,
    );
  }
}

class PigeonTripResponseInfoItem {
  PigeonTripResponseInfoItem({
    required this.info,
  });

  PigeonTripResponseInfo info;

  Object encode() {
    return <Object?>[
      info,
    ];
  }

  static PigeonTripResponseInfoItem decode(Object result) {
    result as List<Object?>;
    return PigeonTripResponseInfoItem(
      info: result[0]! as PigeonTripResponseInfo,
    );
  }
}

class PigeonTrip {
  PigeonTrip({
    this.itinId,
    this.startDate,
    this.endDate,
    this.departureCity,
    this.arrivalCity,
    this.departureAddress,
    this.arrivalAddress,
    this.vehicleId,
    this.tripStatistics,
    this.ecoDriving,
    this.fuelEstimation,
    this.safety,
    this.advancedEcoDriving,
    this.advancedFuelEstimation,
    this.advancedSafety,
    this.pollutants,
    this.tireWear,
    this.brakeWear,
    this.driverDistraction,
    this.itineraryData,
    this.logbook,
    this.safetyEvents,
    this.speedingStatistics,
    this.energyEstimation,
    this.advancedEnergyEstimation,
    this.tripAdvicesData,
    this.maneuverData,
    this.evaluationData,
    this.metadata,
    required this.transportationMode,
    this.declaredTransportationMode,
    required this.unscored,
    this.calls,
    this.speedLimitContexts,
  });

  /// The itinerary ID
  String? itinId;

  /// The start date
  String? startDate;

  /// The end date
  String? endDate;

  /// The departure city
  String? departureCity;

  /// The arrival city
  String? arrivalCity;

  /// The departure address
  String? departureAddress;

  /// The arrival address
  String? arrivalAddress;

  /// The vehicle ID
  String? vehicleId;

  /// The itinerary statistics
  PigeonTripStatistics? tripStatistics;

  /// The eco driving information
  PigeonEcoDriving? ecoDriving;

  /// The fuel estimation information
  PigeonFuelEstimation? fuelEstimation;

  /// The safety information
  PigeonSafety? safety;

  /// The advanced eco driving information
  PigeonAdvancedEcoDriving? advancedEcoDriving;

  /// The advanced fuel estimation information
  PigeonAdvancedFuelEstimation? advancedFuelEstimation;

  /// The advanced safety information
  PigeonAdvancedSafety? advancedSafety;

  /// The pollutants information
  PigeonPollutants? pollutants;

  /// The tire wear information
  PigeonTireWear? tireWear;

  /// The brake wear information
  PigeonBrakeWear? brakeWear;

  /// The driver distraction information
  PigeonDriverDistraction? driverDistraction;

  /// The itinerary data
  PigeonItineraryData? itineraryData;

  /// The logbook information
  PigeonLogbook? logbook;

  /// The list of safety events
  List<PigeonSafetyEvent?>? safetyEvents;

  /// The speeding statistics
  PigeonSpeedingStatistics? speedingStatistics;

  /// The energy estimation information
  PigeonEnergyEstimation? energyEstimation;

  /// The list of advanced energy estimations
  List<PigeonAdvancedEnergyEstimation?>? advancedEnergyEstimation;

  /// Trip advices
  List<PigeonTripAdviceData?>? tripAdvicesData;

  /// Trip maneuver data
  PigeonManeuverData? maneuverData;

  /// Trip evaluation data
  PigeonEvaluationData? evaluationData;

  /// The metadata
  Map<String?, String?>? metadata;

  /// The transportation mode
  int transportationMode;

  /// The declared transportation mode
  PigeonDeclaredTransportationMode? declaredTransportationMode;

  /// The trip is scored or not
  bool unscored;

  /// The trip calls
  List<PigeonCall?>? calls;

  /// The speed limit contexts
  List<PigeonSpeedLimitContext?>? speedLimitContexts;

  Object encode() {
    return <Object?>[
      itinId,
      startDate,
      endDate,
      departureCity,
      arrivalCity,
      departureAddress,
      arrivalAddress,
      vehicleId,
      tripStatistics,
      ecoDriving,
      fuelEstimation,
      safety,
      advancedEcoDriving,
      advancedFuelEstimation,
      advancedSafety,
      pollutants,
      tireWear,
      brakeWear,
      driverDistraction,
      itineraryData,
      logbook,
      safetyEvents,
      speedingStatistics,
      energyEstimation,
      advancedEnergyEstimation,
      tripAdvicesData,
      maneuverData,
      evaluationData,
      metadata,
      transportationMode,
      declaredTransportationMode,
      unscored,
      calls,
      speedLimitContexts,
    ];
  }

  static PigeonTrip decode(Object result) {
    result as List<Object?>;
    return PigeonTrip(
      itinId: result[0] as String?,
      startDate: result[1] as String?,
      endDate: result[2] as String?,
      departureCity: result[3] as String?,
      arrivalCity: result[4] as String?,
      departureAddress: result[5] as String?,
      arrivalAddress: result[6] as String?,
      vehicleId: result[7] as String?,
      tripStatistics: result[8] as PigeonTripStatistics?,
      ecoDriving: result[9] as PigeonEcoDriving?,
      fuelEstimation: result[10] as PigeonFuelEstimation?,
      safety: result[11] as PigeonSafety?,
      advancedEcoDriving: result[12] as PigeonAdvancedEcoDriving?,
      advancedFuelEstimation: result[13] as PigeonAdvancedFuelEstimation?,
      advancedSafety: result[14] as PigeonAdvancedSafety?,
      pollutants: result[15] as PigeonPollutants?,
      tireWear: result[16] as PigeonTireWear?,
      brakeWear: result[17] as PigeonBrakeWear?,
      driverDistraction: result[18] as PigeonDriverDistraction?,
      itineraryData: result[19] as PigeonItineraryData?,
      logbook: result[20] as PigeonLogbook?,
      safetyEvents: (result[21] as List<Object?>?)?.cast<PigeonSafetyEvent?>(),
      speedingStatistics: result[22] as PigeonSpeedingStatistics?,
      energyEstimation: result[23] as PigeonEnergyEstimation?,
      advancedEnergyEstimation: (result[24] as List<Object?>?)
          ?.cast<PigeonAdvancedEnergyEstimation?>(),
      tripAdvicesData:
          (result[25] as List<Object?>?)?.cast<PigeonTripAdviceData?>(),
      maneuverData: result[26] as PigeonManeuverData?,
      evaluationData: result[27] as PigeonEvaluationData?,
      metadata:
          (result[28] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      transportationMode: result[29]! as int,
      declaredTransportationMode:
          result[30] as PigeonDeclaredTransportationMode?,
      unscored: result[31]! as bool,
      calls: (result[32] as List<Object?>?)?.cast<PigeonCall?>(),
      speedLimitContexts:
          (result[33] as List<Object?>?)?.cast<PigeonSpeedLimitContext?>(),
    );
  }
}

class PigeonTripStatistics {
  PigeonTripStatistics({
    required this.tripDuration,
    required this.drivingDuration,
    required this.idlingDuration,
    required this.drivingPercentage,
    required this.idlingPercentage,
    required this.distance,
    required this.speedMean,
    required this.subdispNb,
    required this.meteo,
    required this.day,
    required this.weekDay,
  });

  double tripDuration;

  double drivingDuration;

  double idlingDuration;

  double drivingPercentage;

  double idlingPercentage;

  double distance;

  double speedMean;

  int subdispNb;

  int meteo;

  bool day;

  bool weekDay;

  Object encode() {
    return <Object?>[
      tripDuration,
      drivingDuration,
      idlingDuration,
      drivingPercentage,
      idlingPercentage,
      distance,
      speedMean,
      subdispNb,
      meteo,
      day,
      weekDay,
    ];
  }

  static PigeonTripStatistics decode(Object result) {
    result as List<Object?>;
    return PigeonTripStatistics(
      tripDuration: result[0]! as double,
      drivingDuration: result[1]! as double,
      idlingDuration: result[2]! as double,
      drivingPercentage: result[3]! as double,
      idlingPercentage: result[4]! as double,
      distance: result[5]! as double,
      speedMean: result[6]! as double,
      subdispNb: result[7]! as int,
      meteo: result[8]! as int,
      day: result[9]! as bool,
      weekDay: result[10]! as bool,
    );
  }
}

class PigeonTripAdviceData {
  PigeonTripAdviceData({
    this.id,
    this.title,
    this.message,
    this.messageId,
    this.theme,
    this.adviceEvaluation,
  });

  String? id;

  String? title;

  String? message;

  String? messageId;

  String? theme;

  PigeonTripAdviceEvaluation? adviceEvaluation;

  Object encode() {
    return <Object?>[
      id,
      title,
      message,
      messageId,
      theme,
      adviceEvaluation,
    ];
  }

  static PigeonTripAdviceData decode(Object result) {
    result as List<Object?>;
    return PigeonTripAdviceData(
      id: result[0] as String?,
      title: result[1] as String?,
      message: result[2] as String?,
      messageId: result[3] as String?,
      theme: result[4] as String?,
      adviceEvaluation: result[5] as PigeonTripAdviceEvaluation?,
    );
  }
}

class PigeonTripAdviceEvaluation {
  PigeonTripAdviceEvaluation({
    required this.evaluation,
    required this.feedback,
    this.comment,
  });

  int evaluation;

  int feedback;

  String? comment;

  Object encode() {
    return <Object?>[
      evaluation,
      feedback,
      comment,
    ];
  }

  static PigeonTripAdviceEvaluation decode(Object result) {
    result as List<Object?>;
    return PigeonTripAdviceEvaluation(
      evaluation: result[0]! as int,
      feedback: result[1]! as int,
      comment: result[2] as String?,
    );
  }
}

class PigeonManeuverData {
  PigeonManeuverData({
    required this.nbStraightReverseDrivings,
    required this.nbCurveReverseDrivings,
    required this.nbTurns,
    required this.nbHillStarts,
    required this.nbRoundAbouts,
    required this.nbEmergencyStops,
    required this.nbAngledParkings,
    required this.nbParallelParkings,
    required this.nbBayParkings,
  });

  int nbStraightReverseDrivings;

  int nbCurveReverseDrivings;

  int nbTurns;

  int nbHillStarts;

  int nbRoundAbouts;

  int nbEmergencyStops;

  int nbAngledParkings;

  int nbParallelParkings;

  int nbBayParkings;

  Object encode() {
    return <Object?>[
      nbStraightReverseDrivings,
      nbCurveReverseDrivings,
      nbTurns,
      nbHillStarts,
      nbRoundAbouts,
      nbEmergencyStops,
      nbAngledParkings,
      nbParallelParkings,
      nbBayParkings,
    ];
  }

  static PigeonManeuverData decode(Object result) {
    result as List<Object?>;
    return PigeonManeuverData(
      nbStraightReverseDrivings: result[0]! as int,
      nbCurveReverseDrivings: result[1]! as int,
      nbTurns: result[2]! as int,
      nbHillStarts: result[3]! as int,
      nbRoundAbouts: result[4]! as int,
      nbEmergencyStops: result[5]! as int,
      nbAngledParkings: result[6]! as int,
      nbParallelParkings: result[7]! as int,
      nbBayParkings: result[8]! as int,
    );
  }
}

class PigeonEvaluationData {
  PigeonEvaluationData({
    this.comment,
    required this.evaluation,
  });

  String? comment;

  int evaluation;

  Object encode() {
    return <Object?>[
      comment,
      evaluation,
    ];
  }

  static PigeonEvaluationData decode(Object result) {
    result as List<Object?>;
    return PigeonEvaluationData(
      comment: result[0] as String?,
      evaluation: result[1]! as int,
    );
  }
}

class PigeonDeclaredTransportationMode {
  PigeonDeclaredTransportationMode({
    required this.transportationMode,
    this.comment,
    this.passenger,
  });

  int transportationMode;

  String? comment;

  bool? passenger;

  Object encode() {
    return <Object?>[
      transportationMode,
      comment,
      passenger,
    ];
  }

  static PigeonDeclaredTransportationMode decode(Object result) {
    result as List<Object?>;
    return PigeonDeclaredTransportationMode(
      transportationMode: result[0]! as int,
      comment: result[1] as String?,
      passenger: result[2] as bool?,
    );
  }
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PigeonVehicle) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PigeonTripPoint) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PigeonDKCrashInfo) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is PigeonAdvancedEcoDriving) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is PigeonAdvancedFuelEstimation) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PigeonAdvancedSafety) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is PigeonBrakeWear) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is PigeonCall) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is PigeonAdvancedEnergyEstimation) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is PigeonEnergyEstimation) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is PigeonEcoDriving) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is PigeonFuelEstimation) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is PigeonSafety) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is PigeonPollutants) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is PigeonTireWear) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is PigeonDriverDistraction) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is PigeonItineraryData) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else if (value is PigeonLogbook) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else if (value is PigeonSafetyEvent) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else if (value is PigeonSpeedingStatistics) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    } else if (value is PigeonEcoDrivingContext) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    } else if (value is PigeonFuelEstimationContext) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    } else if (value is PigeonSafetyContext) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else if (value is PigeonSpeedLimitContext) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    } else if (value is PigeonTripResponseStatus) {
      buffer.putUint8(153);
      writeValue(buffer, value.encode());
    } else if (value is PigeonTripResponseInfoItem) {
      buffer.putUint8(154);
      writeValue(buffer, value.encode());
    } else if (value is PigeonTrip) {
      buffer.putUint8(155);
      writeValue(buffer, value.encode());
    } else if (value is PigeonTripStatistics) {
      buffer.putUint8(156);
      writeValue(buffer, value.encode());
    } else if (value is PigeonTripAdviceData) {
      buffer.putUint8(157);
      writeValue(buffer, value.encode());
    } else if (value is PigeonTripAdviceEvaluation) {
      buffer.putUint8(158);
      writeValue(buffer, value.encode());
    } else if (value is PigeonManeuverData) {
      buffer.putUint8(159);
      writeValue(buffer, value.encode());
    } else if (value is PigeonEvaluationData) {
      buffer.putUint8(160);
      writeValue(buffer, value.encode());
    } else if (value is PigeonDeclaredTransportationMode) {
      buffer.putUint8(161);
      writeValue(buffer, value.encode());
    } else if (value is PigeonStartMode) {
      buffer.putUint8(162);
      writeValue(buffer, value.index);
    } else if (value is PigeonCancelTrip) {
      buffer.putUint8(163);
      writeValue(buffer, value.index);
    } else if (value is PigeonState) {
      buffer.putUint8(164);
      writeValue(buffer, value.index);
    } else if (value is PigeonDKCrashFeedbackType) {
      buffer.putUint8(165);
      writeValue(buffer, value.index);
    } else if (value is PigeonDKCrashFeedbackSeverity) {
      buffer.putUint8(166);
      writeValue(buffer, value.index);
    } else if (value is PigeonCrashStatus) {
      buffer.putUint8(167);
      writeValue(buffer, value.index);
    } else if (value is PigeonTripResponseStatusType) {
      buffer.putUint8(168);
      writeValue(buffer, value.index);
    } else if (value is PigeonTripResponseInfo) {
      buffer.putUint8(169);
      writeValue(buffer, value.index);
    } else if (value is PigeonTripResponseError) {
      buffer.putUint8(170);
      writeValue(buffer, value.index);
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        return PigeonVehicle.decode(readValue(buffer)!);
      case 130:
        return PigeonTripPoint.decode(readValue(buffer)!);
      case 131:
        return PigeonDKCrashInfo.decode(readValue(buffer)!);
      case 132:
        return PigeonAdvancedEcoDriving.decode(readValue(buffer)!);
      case 133:
        return PigeonAdvancedFuelEstimation.decode(readValue(buffer)!);
      case 134:
        return PigeonAdvancedSafety.decode(readValue(buffer)!);
      case 135:
        return PigeonBrakeWear.decode(readValue(buffer)!);
      case 136:
        return PigeonCall.decode(readValue(buffer)!);
      case 137:
        return PigeonAdvancedEnergyEstimation.decode(readValue(buffer)!);
      case 138:
        return PigeonEnergyEstimation.decode(readValue(buffer)!);
      case 139:
        return PigeonEcoDriving.decode(readValue(buffer)!);
      case 140:
        return PigeonFuelEstimation.decode(readValue(buffer)!);
      case 141:
        return PigeonSafety.decode(readValue(buffer)!);
      case 142:
        return PigeonPollutants.decode(readValue(buffer)!);
      case 143:
        return PigeonTireWear.decode(readValue(buffer)!);
      case 144:
        return PigeonDriverDistraction.decode(readValue(buffer)!);
      case 145:
        return PigeonItineraryData.decode(readValue(buffer)!);
      case 146:
        return PigeonLogbook.decode(readValue(buffer)!);
      case 147:
        return PigeonSafetyEvent.decode(readValue(buffer)!);
      case 148:
        return PigeonSpeedingStatistics.decode(readValue(buffer)!);
      case 149:
        return PigeonEcoDrivingContext.decode(readValue(buffer)!);
      case 150:
        return PigeonFuelEstimationContext.decode(readValue(buffer)!);
      case 151:
        return PigeonSafetyContext.decode(readValue(buffer)!);
      case 152:
        return PigeonSpeedLimitContext.decode(readValue(buffer)!);
      case 153:
        return PigeonTripResponseStatus.decode(readValue(buffer)!);
      case 154:
        return PigeonTripResponseInfoItem.decode(readValue(buffer)!);
      case 155:
        return PigeonTrip.decode(readValue(buffer)!);
      case 156:
        return PigeonTripStatistics.decode(readValue(buffer)!);
      case 157:
        return PigeonTripAdviceData.decode(readValue(buffer)!);
      case 158:
        return PigeonTripAdviceEvaluation.decode(readValue(buffer)!);
      case 159:
        return PigeonManeuverData.decode(readValue(buffer)!);
      case 160:
        return PigeonEvaluationData.decode(readValue(buffer)!);
      case 161:
        return PigeonDeclaredTransportationMode.decode(readValue(buffer)!);
      case 162:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PigeonStartMode.values[value];
      case 163:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PigeonCancelTrip.values[value];
      case 164:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PigeonState.values[value];
      case 165:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PigeonDKCrashFeedbackType.values[value];
      case 166:
        final int? value = readValue(buffer) as int?;
        return value == null
            ? null
            : PigeonDKCrashFeedbackSeverity.values[value];
      case 167:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PigeonCrashStatus.values[value];
      case 168:
        final int? value = readValue(buffer) as int?;
        return value == null
            ? null
            : PigeonTripResponseStatusType.values[value];
      case 169:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PigeonTripResponseInfo.values[value];
      case 170:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PigeonTripResponseError.values[value];
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class AndroidTripAnalysisApi {
  /// Constructor for [AndroidTripAnalysisApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  AndroidTripAnalysisApi(
      {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String __pigeon_messageChannelSuffix;

  Future<bool> isAutoStartActivated() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.isAutoStartActivated$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<void> activateAutoStart(bool activate) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.activateAutoStart$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[activate]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isCrashDetectionActivated() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.isCrashDetectionActivated$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<void> activateCrashDetection(bool activate) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.activateCrashDetection$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[activate]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startTrip() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.startTrip$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopTrip() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.stopTrip$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> cancelTrip() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.cancelTrip$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isTripRunning() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.isTripRunning$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<void> setStopTimeOut(int timeOut) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.setStopTimeOut$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[timeOut]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isMonitoringPotentialTripStart() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.isMonitoringPotentialTripStart$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<void> setMonitorPotentialTripStart(bool activate) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.setMonitorPotentialTripStart$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[activate]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setVehicle(PigeonVehicle vehicle) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.setVehicle$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[vehicle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Map<String?, String?>?> getTripMetadata() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.getTripMetadata$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as Map<Object?, Object?>?)
          ?.cast<String?, String?>();
    }
  }

  Future<void> updateTripMetadata(String key, String? value) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.updateTripMetadata$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[key, value]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setTripMetadata(Map<String?, String?>? metadata) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.setTripMetadata$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[metadata]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> deleteTripMetadata(String key) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.deleteTripMetadata$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[key]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> deleteAllTripMetadata() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.deleteAllTripMetadata$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class FlutterTripAnalysisApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void tripStarted(PigeonStartMode startMode);

  void tripPoint(PigeonTripPoint tripPoint);

  void tripSavedForRepost();

  void tripFinished(PigeonTripResponseStatus response);

  void tripCancelled(PigeonCancelTrip cancelTrip);

  void potentialTripStart(PigeonStartMode startMode);

  void beaconDetected();

  void sdkStateChanged(PigeonState state);

  void crashDetected(PigeonDKCrashInfo crashInfo);

  void crashFeedbackSent(
      PigeonDKCrashInfo crashInfo,
      PigeonDKCrashFeedbackType feedbackType,
      PigeonDKCrashFeedbackSeverity severity);

  static void setUp(
    FlutterTripAnalysisApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix =
        messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripStarted$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripStarted was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PigeonStartMode? arg_startMode = (args[0] as PigeonStartMode?);
          assert(arg_startMode != null,
              'Argument for dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripStarted was null, expected non-null PigeonStartMode.');
          try {
            api.tripStarted(arg_startMode!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripPoint$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripPoint was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PigeonTripPoint? arg_tripPoint = (args[0] as PigeonTripPoint?);
          assert(arg_tripPoint != null,
              'Argument for dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripPoint was null, expected non-null PigeonTripPoint.');
          try {
            api.tripPoint(arg_tripPoint!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripSavedForRepost$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          try {
            api.tripSavedForRepost();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripFinished$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripFinished was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PigeonTripResponseStatus? arg_response =
              (args[0] as PigeonTripResponseStatus?);
          assert(arg_response != null,
              'Argument for dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripFinished was null, expected non-null PigeonTripResponseStatus.');
          try {
            api.tripFinished(arg_response!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripCancelled$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripCancelled was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PigeonCancelTrip? arg_cancelTrip =
              (args[0] as PigeonCancelTrip?);
          assert(arg_cancelTrip != null,
              'Argument for dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripCancelled was null, expected non-null PigeonCancelTrip.');
          try {
            api.tripCancelled(arg_cancelTrip!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.potentialTripStart$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.potentialTripStart was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PigeonStartMode? arg_startMode = (args[0] as PigeonStartMode?);
          assert(arg_startMode != null,
              'Argument for dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.potentialTripStart was null, expected non-null PigeonStartMode.');
          try {
            api.potentialTripStart(arg_startMode!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.beaconDetected$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          try {
            api.beaconDetected();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.sdkStateChanged$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.sdkStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PigeonState? arg_state = (args[0] as PigeonState?);
          assert(arg_state != null,
              'Argument for dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.sdkStateChanged was null, expected non-null PigeonState.');
          try {
            api.sdkStateChanged(arg_state!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.crashDetected$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.crashDetected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PigeonDKCrashInfo? arg_crashInfo =
              (args[0] as PigeonDKCrashInfo?);
          assert(arg_crashInfo != null,
              'Argument for dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.crashDetected was null, expected non-null PigeonDKCrashInfo.');
          try {
            api.crashDetected(arg_crashInfo!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.crashFeedbackSent$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.crashFeedbackSent was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PigeonDKCrashInfo? arg_crashInfo =
              (args[0] as PigeonDKCrashInfo?);
          assert(arg_crashInfo != null,
              'Argument for dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.crashFeedbackSent was null, expected non-null PigeonDKCrashInfo.');
          final PigeonDKCrashFeedbackType? arg_feedbackType =
              (args[1] as PigeonDKCrashFeedbackType?);
          assert(arg_feedbackType != null,
              'Argument for dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.crashFeedbackSent was null, expected non-null PigeonDKCrashFeedbackType.');
          final PigeonDKCrashFeedbackSeverity? arg_severity =
              (args[2] as PigeonDKCrashFeedbackSeverity?);
          assert(arg_severity != null,
              'Argument for dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.crashFeedbackSent was null, expected non-null PigeonDKCrashFeedbackSeverity.');
          try {
            api.crashFeedbackSent(
                arg_crashInfo!, arg_feedbackType!, arg_severity!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
