// Autogenerated from Pigeon (v20.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.drivequant.drivekit.flutter.tripanalysis

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterTripAnalysisError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterTripAnalysisError {
  return FlutterTripAnalysisError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterTripAnalysisError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class PigeonStartMode(val raw: Int) {
  GPS(0),
  BEACON(1),
  MANUAL(2),
  GEOZONE(3),
  BLUETOOTH(4),
  UNKNOWN_BLUETOOTH(5),
  BICYCLE_ACTIVITY(6),
  CONNECTED_CAR(7);

  companion object {
    fun ofRaw(raw: Int): PigeonStartMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonCancelTrip(val raw: Int) {
  USER(0),
  HIGHSPEED(1),
  NO_SPEED(2),
  NO_BEACON(3),
  MISSING_CONFIGURATION(4),
  NO_GPS_DATA(5),
  RESET(6),
  BEACON_NO_SPEED(7),
  NO_BLUETOOTH_DEVICE(8),
  BLUETOOTH_DEVICE_NO_SPEED(9);

  companion object {
    fun ofRaw(raw: Int): PigeonCancelTrip? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonState(val raw: Int) {
  INACTIVE(0),
  STARTING(1),
  RUNNING(2),
  STOPPING(3),
  SENDING(4);

  companion object {
    fun ofRaw(raw: Int): PigeonState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonDKCrashFeedbackType(val raw: Int) {
  NO_CRASH(0),
  CRASH_CONFIRMED(1),
  NO_FEEDBACK(2);

  companion object {
    fun ofRaw(raw: Int): PigeonDKCrashFeedbackType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonDKCrashFeedbackSeverity(val raw: Int) {
  NONE(0),
  MINOR(1),
  CRITICAL(2);

  companion object {
    fun ofRaw(raw: Int): PigeonDKCrashFeedbackSeverity? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonCrashStatus(val raw: Int) {
  UNCONFIRMED(0),
  CONFIRMED(1);

  companion object {
    fun ofRaw(raw: Int): PigeonCrashStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonTripResponseStatusType(val raw: Int) {
  TRIP_VALID(0),
  TRIP_ERROR(1);

  companion object {
    fun ofRaw(raw: Int): PigeonTripResponseStatusType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonTripResponseInfo(val raw: Int) {
  ENGINE_SPEED_NOT_AVAILABLE(0),
  ENGINE_SPEED_IS_NULL(1),
  NO_VEHICLE_CHARACTERISTICS(2),
  DATA_LOSS(3),
  DISTANCE_TOO_SHORT(4),
  INVALID_VEHICLE_CHARACTERISTICS(5),
  INVALID_VEHICLE_ID(6);

  companion object {
    fun ofRaw(raw: Int): PigeonTripResponseInfo? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonTripResponseError(val raw: Int) {
  NO_ACCOUNT_SET(0),
  NO_ROUTE_OBJECT_FOUND(1),
  INVALID_ROUTE_DEFINITION(2),
  NO_VELOCITY_DATA(3),
  INVALID_SAMPLING_PERIOD(4),
  INVALID_CUSTOMER_ID(5),
  NO_DATE_FOUND(6),
  MAX_DAILY_REQUEST_NUMBER_REACHED(7),
  DATA_ERROR(8),
  INVALID_ROUTE_VECTORS(9),
  MISSING_BEACON(10),
  INVALID_BEACON(11),
  DUPLICATE_TRIP(12),
  INSUFFICIENT_GPS_DATA(13),
  USER_DISABLED(14),
  INVALID_USER(15),
  INVALID_GPS_DATA(16),
  INVALID_TRIP(17),
  ACCOUNT_LIMIT_REACHED(18),
  UNKNOWN_ERROR(19);

  companion object {
    fun ofRaw(raw: Int): PigeonTripResponseError? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonAccuracyLevel(val raw: Int) {
  GOOD(0),
  FAIR(1),
  POOR(2);

  companion object {
    fun ofRaw(raw: Int): PigeonAccuracyLevel? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonTripCancelationReason(val raw: Int) {
  USER(0),
  HIGH_SPEED(1),
  NO_SPEED(2),
  NO_BEACON(3),
  MISSING_CONFIGURATION(4),
  NO_LOCATION_DATA(5),
  RESET(6),
  BEACON_NO_SPEED(7),
  NO_BLUETOOTH_DEVICE(8),
  BLUETOOTH_DEVICE_NO_SPEED(9),
  APP_KILLED(10);

  companion object {
    fun ofRaw(raw: Int): PigeonTripCancelationReason? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonCreateTripSharingLinkStatus(val raw: Int) {
  SUCCESS(0),
  ACTIVE_LINK_ALREADY_EXISTS(1),
  ERROR(2),
  USER_NOT_CONNECTED(3),
  INVALID_DURATION(4),
  UNAUTHENTICATED(5),
  FORBIDDEN(6);

  companion object {
    fun ofRaw(raw: Int): PigeonCreateTripSharingLinkStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonVehicle (
  val carTypeIndex: Long,
  val carEngineIndex: Long,
  val carPower: Long,
  val carMass: Long,
  val carGearboxIndex: Long,
  val carConsumption: Double,
  val carAutoGearboxNumber: Long,
  val engineDisplacement: Long,
  val carPassengers: Long,
  val dqIndex: String? = null,
  val sra: String? = null,
  val frontTireSize: String? = null,
  val rearTireSize: String? = null,
  val length: Double,
  val width: Double,
  val height: Double,
  val engineCylinderNb: Long,
  val driveWheels: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonVehicle {
      val carTypeIndex = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val carEngineIndex = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      val carPower = __pigeon_list[2].let { num -> if (num is Int) num.toLong() else num as Long }
      val carMass = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val carGearboxIndex = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long }
      val carConsumption = __pigeon_list[5] as Double
      val carAutoGearboxNumber = __pigeon_list[6].let { num -> if (num is Int) num.toLong() else num as Long }
      val engineDisplacement = __pigeon_list[7].let { num -> if (num is Int) num.toLong() else num as Long }
      val carPassengers = __pigeon_list[8].let { num -> if (num is Int) num.toLong() else num as Long }
      val dqIndex = __pigeon_list[9] as String?
      val sra = __pigeon_list[10] as String?
      val frontTireSize = __pigeon_list[11] as String?
      val rearTireSize = __pigeon_list[12] as String?
      val length = __pigeon_list[13] as Double
      val width = __pigeon_list[14] as Double
      val height = __pigeon_list[15] as Double
      val engineCylinderNb = __pigeon_list[16].let { num -> if (num is Int) num.toLong() else num as Long }
      val driveWheels = __pigeon_list[17].let { num -> if (num is Int) num.toLong() else num as Long }
      return PigeonVehicle(carTypeIndex, carEngineIndex, carPower, carMass, carGearboxIndex, carConsumption, carAutoGearboxNumber, engineDisplacement, carPassengers, dqIndex, sra, frontTireSize, rearTireSize, length, width, height, engineCylinderNb, driveWheels)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      carTypeIndex,
      carEngineIndex,
      carPower,
      carMass,
      carGearboxIndex,
      carConsumption,
      carAutoGearboxNumber,
      engineDisplacement,
      carPassengers,
      dqIndex,
      sra,
      frontTireSize,
      rearTireSize,
      length,
      width,
      height,
      engineCylinderNb,
      driveWheels,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonTripPoint (
  val latitude: Double,
  val longitude: Double,
  val speed: Double,
  val accuracy: Double,
  val elevation: Double,
  val distance: Double,
  val heading: Double,
  val duration: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonTripPoint {
      val latitude = __pigeon_list[0] as Double
      val longitude = __pigeon_list[1] as Double
      val speed = __pigeon_list[2] as Double
      val accuracy = __pigeon_list[3] as Double
      val elevation = __pigeon_list[4] as Double
      val distance = __pigeon_list[5] as Double
      val heading = __pigeon_list[6] as Double
      val duration = __pigeon_list[7] as Double
      return PigeonTripPoint(latitude, longitude, speed, accuracy, elevation, distance, heading, duration)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      latitude,
      longitude,
      speed,
      accuracy,
      elevation,
      distance,
      heading,
      duration,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonDKCrashInfo (
  val crashId: String? = null,
  val date: String? = null,
  val status: PigeonCrashStatus? = null,
  val probability: Long,
  val latitude: Double,
  val longitude: Double,
  val velocity: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonDKCrashInfo {
      val crashId = __pigeon_list[0] as String?
      val date = __pigeon_list[1] as String?
      val status = __pigeon_list[2] as PigeonCrashStatus?
      val probability = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val latitude = __pigeon_list[4] as Double
      val longitude = __pigeon_list[5] as Double
      val velocity = __pigeon_list[6] as Double
      return PigeonDKCrashInfo(crashId, date, status, probability, latitude, longitude, velocity)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      crashId,
      date,
      status,
      probability,
      latitude,
      longitude,
      velocity,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonAdvancedEcoDriving (
  val ecoDrivingContext: List<PigeonEcoDrivingContext?>

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonAdvancedEcoDriving {
      val ecoDrivingContext = __pigeon_list[0] as List<PigeonEcoDrivingContext?>
      return PigeonAdvancedEcoDriving(ecoDrivingContext)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ecoDrivingContext,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonAdvancedFuelEstimation (
  val fuelEstimationContext: List<PigeonFuelEstimationContext?>

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonAdvancedFuelEstimation {
      val fuelEstimationContext = __pigeon_list[0] as List<PigeonFuelEstimationContext?>
      return PigeonAdvancedFuelEstimation(fuelEstimationContext)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      fuelEstimationContext,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonAdvancedSafety (
  val safetyContext: List<PigeonSafetyContext?>

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonAdvancedSafety {
      val safetyContext = __pigeon_list[0] as List<PigeonSafetyContext?>
      return PigeonAdvancedSafety(safetyContext)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      safetyContext,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonBrakeWear (
  val frontBrakeAutonomy: Long,
  val frontBrakeDistance: Long,
  val frontBrakePadWear: Long,
  val frontBrakeTotalWear: Long,
  val frontBrakeWearRate: Long,
  val rearBrakeAutonomy: Long,
  val rearBrakeDistance: Long,
  val rearBrakePadWear: Long,
  val rearBrakeTotalWear: Long,
  val rearBrakeWearRate: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonBrakeWear {
      val frontBrakeAutonomy = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val frontBrakeDistance = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      val frontBrakePadWear = __pigeon_list[2].let { num -> if (num is Int) num.toLong() else num as Long }
      val frontBrakeTotalWear = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val frontBrakeWearRate = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearBrakeAutonomy = __pigeon_list[5].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearBrakeDistance = __pigeon_list[6].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearBrakePadWear = __pigeon_list[7].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearBrakeTotalWear = __pigeon_list[8].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearBrakeWearRate = __pigeon_list[9].let { num -> if (num is Int) num.toLong() else num as Long }
      return PigeonBrakeWear(frontBrakeAutonomy, frontBrakeDistance, frontBrakePadWear, frontBrakeTotalWear, frontBrakeWearRate, rearBrakeAutonomy, rearBrakeDistance, rearBrakePadWear, rearBrakeTotalWear, rearBrakeWearRate)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      frontBrakeAutonomy,
      frontBrakeDistance,
      frontBrakePadWear,
      frontBrakeTotalWear,
      frontBrakeWearRate,
      rearBrakeAutonomy,
      rearBrakeDistance,
      rearBrakePadWear,
      rearBrakeTotalWear,
      rearBrakeWearRate,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonCall (
  val id: Long,
  val start: Double,
  val end: Double,
  val duration: Long,
  val durationPercent: Long,
  val distance: Long,
  val distancePercent: Long,
  val type: String,
  val audioSystem: String,
  val audioInput: String? = null,
  val audioOutput: String? = null,
  val audioName: String? = null,
  val bluetoothClass: Long,
  val isForbidden: Boolean

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonCall {
      val id = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val start = __pigeon_list[1] as Double
      val end = __pigeon_list[2] as Double
      val duration = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val durationPercent = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long }
      val distance = __pigeon_list[5].let { num -> if (num is Int) num.toLong() else num as Long }
      val distancePercent = __pigeon_list[6].let { num -> if (num is Int) num.toLong() else num as Long }
      val type = __pigeon_list[7] as String
      val audioSystem = __pigeon_list[8] as String
      val audioInput = __pigeon_list[9] as String?
      val audioOutput = __pigeon_list[10] as String?
      val audioName = __pigeon_list[11] as String?
      val bluetoothClass = __pigeon_list[12].let { num -> if (num is Int) num.toLong() else num as Long }
      val isForbidden = __pigeon_list[13] as Boolean
      return PigeonCall(id, start, end, duration, durationPercent, distance, distancePercent, type, audioSystem, audioInput, audioOutput, audioName, bluetoothClass, isForbidden)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      start,
      end,
      duration,
      durationPercent,
      distance,
      distancePercent,
      type,
      audioSystem,
      audioInput,
      audioOutput,
      audioName,
      bluetoothClass,
      isForbidden,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonAdvancedEnergyEstimation (
  val energy: Double,
  val energyConsumption: Double,
  val energyOpti: Double,
  val energyOptiConsumption: Double,
  val duration: Double,
  val distance: Double,
  val contextId: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonAdvancedEnergyEstimation {
      val energy = __pigeon_list[0] as Double
      val energyConsumption = __pigeon_list[1] as Double
      val energyOpti = __pigeon_list[2] as Double
      val energyOptiConsumption = __pigeon_list[3] as Double
      val duration = __pigeon_list[4] as Double
      val distance = __pigeon_list[5] as Double
      val contextId = __pigeon_list[6].let { num -> if (num is Int) num.toLong() else num as Long }
      return PigeonAdvancedEnergyEstimation(energy, energyConsumption, energyOpti, energyOptiConsumption, duration, distance, contextId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      energy,
      energyConsumption,
      energyOpti,
      energyOptiConsumption,
      duration,
      distance,
      contextId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonEnergyEstimation (
  val energy: Double,
  val energyConsumption: Double,
  val energyOpti: Double,
  val energyOptiConsumption: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonEnergyEstimation {
      val energy = __pigeon_list[0] as Double
      val energyConsumption = __pigeon_list[1] as Double
      val energyOpti = __pigeon_list[2] as Double
      val energyOptiConsumption = __pigeon_list[3] as Double
      return PigeonEnergyEstimation(energy, energyConsumption, energyOpti, energyOptiConsumption)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      energy,
      energyConsumption,
      energyOpti,
      energyOptiConsumption,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonEcoDriving (
  val score: Double,
  val scoreAccel: Double,
  val scoreMain: Double,
  val scoreDecel: Double,
  val stdDevAccel: Double,
  val stdDevMain: Double,
  val stdDevDecel: Double,
  val energyClass: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonEcoDriving {
      val score = __pigeon_list[0] as Double
      val scoreAccel = __pigeon_list[1] as Double
      val scoreMain = __pigeon_list[2] as Double
      val scoreDecel = __pigeon_list[3] as Double
      val stdDevAccel = __pigeon_list[4] as Double
      val stdDevMain = __pigeon_list[5] as Double
      val stdDevDecel = __pigeon_list[6] as Double
      val energyClass = __pigeon_list[7].let { num -> if (num is Int) num.toLong() else num as Long }
      return PigeonEcoDriving(score, scoreAccel, scoreMain, scoreDecel, stdDevAccel, stdDevMain, stdDevDecel, energyClass)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      score,
      scoreAccel,
      scoreMain,
      scoreDecel,
      stdDevAccel,
      stdDevMain,
      stdDevDecel,
      energyClass,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonFuelEstimation (
  val co2Mass: Double,
  val co2Emission: Double,
  val fuelVolume: Double,
  val fuelConsumption: Double,
  val idleFuelVolume: Double,
  val idleFuelPercentage: Double,
  val idleFuelConsumption: Double,
  val idleCo2Emission: Double,
  val idleCo2Mass: Double,
  val engineTempStatus: Boolean,
  val coldFuelVolume: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonFuelEstimation {
      val co2Mass = __pigeon_list[0] as Double
      val co2Emission = __pigeon_list[1] as Double
      val fuelVolume = __pigeon_list[2] as Double
      val fuelConsumption = __pigeon_list[3] as Double
      val idleFuelVolume = __pigeon_list[4] as Double
      val idleFuelPercentage = __pigeon_list[5] as Double
      val idleFuelConsumption = __pigeon_list[6] as Double
      val idleCo2Emission = __pigeon_list[7] as Double
      val idleCo2Mass = __pigeon_list[8] as Double
      val engineTempStatus = __pigeon_list[9] as Boolean
      val coldFuelVolume = __pigeon_list[10] as Double
      return PigeonFuelEstimation(co2Mass, co2Emission, fuelVolume, fuelConsumption, idleFuelVolume, idleFuelPercentage, idleFuelConsumption, idleCo2Emission, idleCo2Mass, engineTempStatus, coldFuelVolume)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      co2Mass,
      co2Emission,
      fuelVolume,
      fuelConsumption,
      idleFuelVolume,
      idleFuelPercentage,
      idleFuelConsumption,
      idleCo2Emission,
      idleCo2Mass,
      engineTempStatus,
      coldFuelVolume,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonSafety (
  val nbAdh: Long,
  val nbAccel: Long,
  val nbDecel: Long,
  val nbAdhCrit: Long,
  val nbAccelCrit: Long,
  val nbDecelCrit: Long,
  val safetyScore: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonSafety {
      val nbAdh = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbAccel = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbDecel = __pigeon_list[2].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbAdhCrit = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbAccelCrit = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbDecelCrit = __pigeon_list[5].let { num -> if (num is Int) num.toLong() else num as Long }
      val safetyScore = __pigeon_list[6] as Double
      return PigeonSafety(nbAdh, nbAccel, nbDecel, nbAdhCrit, nbAccelCrit, nbDecelCrit, safetyScore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      nbAdh,
      nbAccel,
      nbDecel,
      nbAdhCrit,
      nbAccelCrit,
      nbDecelCrit,
      safetyScore,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonPollutants (
  val co: Double,
  val hc: Double,
  val nox: Double,
  val soot: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonPollutants {
      val co = __pigeon_list[0] as Double
      val hc = __pigeon_list[1] as Double
      val nox = __pigeon_list[2] as Double
      val soot = __pigeon_list[3] as Double
      return PigeonPollutants(co, hc, nox, soot)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      co,
      hc,
      nox,
      soot,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonTireWear (
  val frontTireAutonomy: Long,
  val frontTireDistance: Long,
  val frontTireTotalWear: Long,
  val frontTireWear: Long,
  val frontTireWearRate: Long,
  val rearTireAutonomy: Long,
  val rearTireDistance: Long,
  val rearTireTotalWear: Long,
  val rearTireWear: Long,
  val rearTireWearRate: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonTireWear {
      val frontTireAutonomy = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val frontTireDistance = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      val frontTireTotalWear = __pigeon_list[2].let { num -> if (num is Int) num.toLong() else num as Long }
      val frontTireWear = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val frontTireWearRate = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearTireAutonomy = __pigeon_list[5].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearTireDistance = __pigeon_list[6].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearTireTotalWear = __pigeon_list[7].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearTireWear = __pigeon_list[8].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearTireWearRate = __pigeon_list[9].let { num -> if (num is Int) num.toLong() else num as Long }
      return PigeonTireWear(frontTireAutonomy, frontTireDistance, frontTireTotalWear, frontTireWear, frontTireWearRate, rearTireAutonomy, rearTireDistance, rearTireTotalWear, rearTireWear, rearTireWearRate)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      frontTireAutonomy,
      frontTireDistance,
      frontTireTotalWear,
      frontTireWear,
      frontTireWearRate,
      rearTireAutonomy,
      rearTireDistance,
      rearTireTotalWear,
      rearTireWear,
      rearTireWearRate,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonDriverDistraction (
  val nbUnlock: Long,
  val durationUnlock: Double,
  val durationPercentUnlock: Double,
  val distanceUnlock: Double,
  val distancePercentUnlock: Double,
  val score: Double,
  val scoreUnlock: Double? = null,
  val scoreCall: Double? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonDriverDistraction {
      val nbUnlock = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val durationUnlock = __pigeon_list[1] as Double
      val durationPercentUnlock = __pigeon_list[2] as Double
      val distanceUnlock = __pigeon_list[3] as Double
      val distancePercentUnlock = __pigeon_list[4] as Double
      val score = __pigeon_list[5] as Double
      val scoreUnlock = __pigeon_list[6] as Double?
      val scoreCall = __pigeon_list[7] as Double?
      return PigeonDriverDistraction(nbUnlock, durationUnlock, durationPercentUnlock, distanceUnlock, distancePercentUnlock, score, scoreUnlock, scoreCall)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      nbUnlock,
      durationUnlock,
      durationPercentUnlock,
      distanceUnlock,
      distancePercentUnlock,
      score,
      scoreUnlock,
      scoreCall,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonLogbook (
  val status: Long,
  val updateDate: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonLogbook {
      val status = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val updateDate = __pigeon_list[1] as String?
      return PigeonLogbook(status, updateDate)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      status,
      updateDate,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonSafetyEvent (
  val time: Double,
  val longitude: Double,
  val latitude: Double,
  val velocity: Double,
  val heading: Double,
  val elevation: Double,
  val distance: Double,
  val type: Long,
  val level: Long,
  val value: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonSafetyEvent {
      val time = __pigeon_list[0] as Double
      val longitude = __pigeon_list[1] as Double
      val latitude = __pigeon_list[2] as Double
      val velocity = __pigeon_list[3] as Double
      val heading = __pigeon_list[4] as Double
      val elevation = __pigeon_list[5] as Double
      val distance = __pigeon_list[6] as Double
      val type = __pigeon_list[7].let { num -> if (num is Int) num.toLong() else num as Long }
      val level = __pigeon_list[8].let { num -> if (num is Int) num.toLong() else num as Long }
      val value = __pigeon_list[9] as Double
      return PigeonSafetyEvent(time, longitude, latitude, velocity, heading, elevation, distance, type, level, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      time,
      longitude,
      latitude,
      velocity,
      heading,
      elevation,
      distance,
      type,
      level,
      value,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonSpeedingStatistics (
  val distance: Long,
  val duration: Long,
  val speedingDistance: Long,
  val speedingDuration: Long,
  val score: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonSpeedingStatistics {
      val distance = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val duration = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      val speedingDistance = __pigeon_list[2].let { num -> if (num is Int) num.toLong() else num as Long }
      val speedingDuration = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val score = __pigeon_list[4] as Double
      return PigeonSpeedingStatistics(distance, duration, speedingDistance, speedingDuration, score)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      distance,
      duration,
      speedingDistance,
      speedingDuration,
      score,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonEcoDrivingContext (
  val contextId: Long,
  val distance: Double,
  val duration: Double,
  val efficiencyScore: Double,
  val scoreAccel: Double,
  val scoreMain: Double,
  val scoreDecel: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonEcoDrivingContext {
      val contextId = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val distance = __pigeon_list[1] as Double
      val duration = __pigeon_list[2] as Double
      val efficiencyScore = __pigeon_list[3] as Double
      val scoreAccel = __pigeon_list[4] as Double
      val scoreMain = __pigeon_list[5] as Double
      val scoreDecel = __pigeon_list[6] as Double
      return PigeonEcoDrivingContext(contextId, distance, duration, efficiencyScore, scoreAccel, scoreMain, scoreDecel)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      contextId,
      distance,
      duration,
      efficiencyScore,
      scoreAccel,
      scoreMain,
      scoreDecel,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonFuelEstimationContext (
  val contextId: Long,
  val distance: Double,
  val duration: Double,
  val co2Mass: Double,
  val co2Emission: Double,
  val fuelVolume: Double,
  val fuelConsumption: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonFuelEstimationContext {
      val contextId = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val distance = __pigeon_list[1] as Double
      val duration = __pigeon_list[2] as Double
      val co2Mass = __pigeon_list[3] as Double
      val co2Emission = __pigeon_list[4] as Double
      val fuelVolume = __pigeon_list[5] as Double
      val fuelConsumption = __pigeon_list[6] as Double
      return PigeonFuelEstimationContext(contextId, distance, duration, co2Mass, co2Emission, fuelVolume, fuelConsumption)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      contextId,
      distance,
      duration,
      co2Mass,
      co2Emission,
      fuelVolume,
      fuelConsumption,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonSafetyContext (
  val contextId: Long,
  val distance: Double,
  val duration: Double,
  val nbAdh: Long,
  val nbAccel: Long,
  val nbDecel: Long,
  val nbAdhCrit: Long,
  val nbAccelCrit: Long,
  val nbDecelCrit: Long,
  val safetyScore: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonSafetyContext {
      val contextId = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val distance = __pigeon_list[1] as Double
      val duration = __pigeon_list[2] as Double
      val nbAdh = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbAccel = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbDecel = __pigeon_list[5].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbAdhCrit = __pigeon_list[6].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbAccelCrit = __pigeon_list[7].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbDecelCrit = __pigeon_list[8].let { num -> if (num is Int) num.toLong() else num as Long }
      val safetyScore = __pigeon_list[9] as Double
      return PigeonSafetyContext(contextId, distance, duration, nbAdh, nbAccel, nbDecel, nbAdhCrit, nbAccelCrit, nbDecelCrit, safetyScore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      contextId,
      distance,
      duration,
      nbAdh,
      nbAccel,
      nbDecel,
      nbAdhCrit,
      nbAccelCrit,
      nbDecelCrit,
      safetyScore,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonSpeedLimitContext (
  val speedLimit: Long,
  val distance: Long,
  val duration: Long,
  val speedingDistance: Long,
  val speedingDuration: Long,
  val score: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonSpeedLimitContext {
      val speedLimit = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val distance = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      val duration = __pigeon_list[2].let { num -> if (num is Int) num.toLong() else num as Long }
      val speedingDistance = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val speedingDuration = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long }
      val score = __pigeon_list[5] as Double
      return PigeonSpeedLimitContext(speedLimit, distance, duration, speedingDistance, speedingDuration, score)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      speedLimit,
      distance,
      duration,
      speedingDistance,
      speedingDuration,
      score,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonTripResponseStatus (
  val status: PigeonTripResponseStatusType,
  val itinId: String? = null,
  val hasSafetyAndEcoDrivingScore: Boolean,
  val info: List<PigeonTripResponseInfoItem?>,
  val error: PigeonTripResponseError? = null,
  val trip: PigeonTrip? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonTripResponseStatus {
      val status = __pigeon_list[0] as PigeonTripResponseStatusType
      val itinId = __pigeon_list[1] as String?
      val hasSafetyAndEcoDrivingScore = __pigeon_list[2] as Boolean
      val info = __pigeon_list[3] as List<PigeonTripResponseInfoItem?>
      val error = __pigeon_list[4] as PigeonTripResponseError?
      val trip = __pigeon_list[5] as PigeonTrip?
      return PigeonTripResponseStatus(status, itinId, hasSafetyAndEcoDrivingScore, info, error, trip)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      status,
      itinId,
      hasSafetyAndEcoDrivingScore,
      info,
      error,
      trip,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonTripResponseInfoItem (
  val info: PigeonTripResponseInfo

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonTripResponseInfoItem {
      val info = __pigeon_list[0] as PigeonTripResponseInfo
      return PigeonTripResponseInfoItem(info)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      info,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonTrip (
  /** The itinerary ID */
  val itinId: String? = null,
  /** The start date */
  val startDate: String? = null,
  /** The end date */
  val endDate: String? = null,
  /** The departure city */
  val departureCity: String? = null,
  /** The arrival city */
  val arrivalCity: String? = null,
  /** The departure address */
  val departureAddress: String? = null,
  /** The arrival address */
  val arrivalAddress: String? = null,
  /** The vehicle ID */
  val vehicleId: String? = null,
  /** The itinerary statistics */
  val tripStatistics: PigeonTripStatistics? = null,
  /** The eco driving information */
  val ecoDriving: PigeonEcoDriving? = null,
  /** The fuel estimation information */
  val fuelEstimation: PigeonFuelEstimation? = null,
  /** The safety information */
  val safety: PigeonSafety? = null,
  /** The advanced eco driving information */
  val advancedEcoDriving: PigeonAdvancedEcoDriving? = null,
  /** The advanced fuel estimation information */
  val advancedFuelEstimation: PigeonAdvancedFuelEstimation? = null,
  /** The advanced safety information */
  val advancedSafety: PigeonAdvancedSafety? = null,
  /** The pollutants information */
  val pollutants: PigeonPollutants? = null,
  /** The tire wear information */
  val tireWear: PigeonTireWear? = null,
  /** The brake wear information */
  val brakeWear: PigeonBrakeWear? = null,
  /** The driver distraction information */
  val driverDistraction: PigeonDriverDistraction? = null,
  /** The logbook information */
  val logbook: PigeonLogbook? = null,
  /** The list of safety events */
  val safetyEvents: List<PigeonSafetyEvent?>? = null,
  /** The speeding statistics */
  val speedingStatistics: PigeonSpeedingStatistics? = null,
  /** The energy estimation information */
  val energyEstimation: PigeonEnergyEstimation? = null,
  /** The list of advanced energy estimations */
  val advancedEnergyEstimation: List<PigeonAdvancedEnergyEstimation?>? = null,
  /** Trip advices */
  val tripAdvicesData: List<PigeonTripAdviceData?>? = null,
  /** Trip maneuver data */
  val maneuverData: PigeonManeuverData? = null,
  /** Trip evaluation data */
  val evaluationData: PigeonEvaluationData? = null,
  /** The metadata */
  val metadata: Map<String?, String?>? = null,
  /** The transportation mode */
  val transportationMode: Long,
  /** The declared transportation mode */
  val declaredTransportationMode: PigeonDeclaredTransportationMode? = null,
  /** The trip is scored or not */
  val unscored: Boolean,
  /** The trip calls */
  val calls: List<PigeonCall?>? = null,
  /** The speed limit contexts */
  val speedLimitContexts: List<PigeonSpeedLimitContext?>? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonTrip {
      val itinId = __pigeon_list[0] as String?
      val startDate = __pigeon_list[1] as String?
      val endDate = __pigeon_list[2] as String?
      val departureCity = __pigeon_list[3] as String?
      val arrivalCity = __pigeon_list[4] as String?
      val departureAddress = __pigeon_list[5] as String?
      val arrivalAddress = __pigeon_list[6] as String?
      val vehicleId = __pigeon_list[7] as String?
      val tripStatistics = __pigeon_list[8] as PigeonTripStatistics?
      val ecoDriving = __pigeon_list[9] as PigeonEcoDriving?
      val fuelEstimation = __pigeon_list[10] as PigeonFuelEstimation?
      val safety = __pigeon_list[11] as PigeonSafety?
      val advancedEcoDriving = __pigeon_list[12] as PigeonAdvancedEcoDriving?
      val advancedFuelEstimation = __pigeon_list[13] as PigeonAdvancedFuelEstimation?
      val advancedSafety = __pigeon_list[14] as PigeonAdvancedSafety?
      val pollutants = __pigeon_list[15] as PigeonPollutants?
      val tireWear = __pigeon_list[16] as PigeonTireWear?
      val brakeWear = __pigeon_list[17] as PigeonBrakeWear?
      val driverDistraction = __pigeon_list[18] as PigeonDriverDistraction?
      val logbook = __pigeon_list[19] as PigeonLogbook?
      val safetyEvents = __pigeon_list[20] as List<PigeonSafetyEvent?>?
      val speedingStatistics = __pigeon_list[21] as PigeonSpeedingStatistics?
      val energyEstimation = __pigeon_list[22] as PigeonEnergyEstimation?
      val advancedEnergyEstimation = __pigeon_list[23] as List<PigeonAdvancedEnergyEstimation?>?
      val tripAdvicesData = __pigeon_list[24] as List<PigeonTripAdviceData?>?
      val maneuverData = __pigeon_list[25] as PigeonManeuverData?
      val evaluationData = __pigeon_list[26] as PigeonEvaluationData?
      val metadata = __pigeon_list[27] as Map<String?, String?>?
      val transportationMode = __pigeon_list[28].let { num -> if (num is Int) num.toLong() else num as Long }
      val declaredTransportationMode = __pigeon_list[29] as PigeonDeclaredTransportationMode?
      val unscored = __pigeon_list[30] as Boolean
      val calls = __pigeon_list[31] as List<PigeonCall?>?
      val speedLimitContexts = __pigeon_list[32] as List<PigeonSpeedLimitContext?>?
      return PigeonTrip(itinId, startDate, endDate, departureCity, arrivalCity, departureAddress, arrivalAddress, vehicleId, tripStatistics, ecoDriving, fuelEstimation, safety, advancedEcoDriving, advancedFuelEstimation, advancedSafety, pollutants, tireWear, brakeWear, driverDistraction, logbook, safetyEvents, speedingStatistics, energyEstimation, advancedEnergyEstimation, tripAdvicesData, maneuverData, evaluationData, metadata, transportationMode, declaredTransportationMode, unscored, calls, speedLimitContexts)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      itinId,
      startDate,
      endDate,
      departureCity,
      arrivalCity,
      departureAddress,
      arrivalAddress,
      vehicleId,
      tripStatistics,
      ecoDriving,
      fuelEstimation,
      safety,
      advancedEcoDriving,
      advancedFuelEstimation,
      advancedSafety,
      pollutants,
      tireWear,
      brakeWear,
      driverDistraction,
      logbook,
      safetyEvents,
      speedingStatistics,
      energyEstimation,
      advancedEnergyEstimation,
      tripAdvicesData,
      maneuverData,
      evaluationData,
      metadata,
      transportationMode,
      declaredTransportationMode,
      unscored,
      calls,
      speedLimitContexts,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonTripStatistics (
  val tripDuration: Double,
  val drivingDuration: Double,
  val idlingDuration: Double,
  val drivingPercentage: Double,
  val idlingPercentage: Double,
  val distance: Double,
  val speedMean: Double,
  val subdispNb: Long,
  val meteo: Long,
  val day: Boolean,
  val weekDay: Boolean

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonTripStatistics {
      val tripDuration = __pigeon_list[0] as Double
      val drivingDuration = __pigeon_list[1] as Double
      val idlingDuration = __pigeon_list[2] as Double
      val drivingPercentage = __pigeon_list[3] as Double
      val idlingPercentage = __pigeon_list[4] as Double
      val distance = __pigeon_list[5] as Double
      val speedMean = __pigeon_list[6] as Double
      val subdispNb = __pigeon_list[7].let { num -> if (num is Int) num.toLong() else num as Long }
      val meteo = __pigeon_list[8].let { num -> if (num is Int) num.toLong() else num as Long }
      val day = __pigeon_list[9] as Boolean
      val weekDay = __pigeon_list[10] as Boolean
      return PigeonTripStatistics(tripDuration, drivingDuration, idlingDuration, drivingPercentage, idlingPercentage, distance, speedMean, subdispNb, meteo, day, weekDay)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      tripDuration,
      drivingDuration,
      idlingDuration,
      drivingPercentage,
      idlingPercentage,
      distance,
      speedMean,
      subdispNb,
      meteo,
      day,
      weekDay,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonTripAdviceData (
  val id: String? = null,
  val title: String? = null,
  val message: String? = null,
  val messageId: String? = null,
  val theme: String? = null,
  val adviceEvaluation: PigeonTripAdviceEvaluation? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonTripAdviceData {
      val id = __pigeon_list[0] as String?
      val title = __pigeon_list[1] as String?
      val message = __pigeon_list[2] as String?
      val messageId = __pigeon_list[3] as String?
      val theme = __pigeon_list[4] as String?
      val adviceEvaluation = __pigeon_list[5] as PigeonTripAdviceEvaluation?
      return PigeonTripAdviceData(id, title, message, messageId, theme, adviceEvaluation)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      title,
      message,
      messageId,
      theme,
      adviceEvaluation,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonTripAdviceEvaluation (
  val evaluation: Long,
  val feedback: Long,
  val comment: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonTripAdviceEvaluation {
      val evaluation = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val feedback = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      val comment = __pigeon_list[2] as String?
      return PigeonTripAdviceEvaluation(evaluation, feedback, comment)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      evaluation,
      feedback,
      comment,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonManeuverData (
  val nbStraightReverseDrivings: Long,
  val nbCurveReverseDrivings: Long,
  val nbTurns: Long,
  val nbHillStarts: Long,
  val nbRoundAbouts: Long,
  val nbEmergencyStops: Long,
  val nbAngledParkings: Long,
  val nbParallelParkings: Long,
  val nbBayParkings: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonManeuverData {
      val nbStraightReverseDrivings = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbCurveReverseDrivings = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbTurns = __pigeon_list[2].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbHillStarts = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbRoundAbouts = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbEmergencyStops = __pigeon_list[5].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbAngledParkings = __pigeon_list[6].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbParallelParkings = __pigeon_list[7].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbBayParkings = __pigeon_list[8].let { num -> if (num is Int) num.toLong() else num as Long }
      return PigeonManeuverData(nbStraightReverseDrivings, nbCurveReverseDrivings, nbTurns, nbHillStarts, nbRoundAbouts, nbEmergencyStops, nbAngledParkings, nbParallelParkings, nbBayParkings)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      nbStraightReverseDrivings,
      nbCurveReverseDrivings,
      nbTurns,
      nbHillStarts,
      nbRoundAbouts,
      nbEmergencyStops,
      nbAngledParkings,
      nbParallelParkings,
      nbBayParkings,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonEvaluationData (
  val comment: String? = null,
  val evaluation: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonEvaluationData {
      val comment = __pigeon_list[0] as String?
      val evaluation = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      return PigeonEvaluationData(comment, evaluation)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      comment,
      evaluation,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonDeclaredTransportationMode (
  val transportationMode: Long,
  val comment: String? = null,
  val passenger: Boolean? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonDeclaredTransportationMode {
      val transportationMode = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val comment = __pigeon_list[1] as String?
      val passenger = __pigeon_list[2] as Boolean?
      return PigeonDeclaredTransportationMode(transportationMode, comment, passenger)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      transportationMode,
      comment,
      passenger,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonCurrentTripInfo (
  val localTripId: String,
  val date: String,
  val startMode: PigeonStartMode

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonCurrentTripInfo {
      val localTripId = __pigeon_list[0] as String
      val date = __pigeon_list[1] as String
      val startMode = __pigeon_list[2] as PigeonStartMode
      return PigeonCurrentTripInfo(localTripId, date, startMode)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      localTripId,
      date,
      startMode,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonLastTripLocation (
  val date: String,
  val latitude: Double,
  val longitude: Double,
  val accuracyMeter: Double,
  val accuracyLevel: PigeonAccuracyLevel

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonLastTripLocation {
      val date = __pigeon_list[0] as String
      val latitude = __pigeon_list[1] as Double
      val longitude = __pigeon_list[2] as Double
      val accuracyMeter = __pigeon_list[3] as Double
      val accuracyLevel = __pigeon_list[4] as PigeonAccuracyLevel
      return PigeonLastTripLocation(date, latitude, longitude, accuracyMeter, accuracyLevel)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      date,
      latitude,
      longitude,
      accuracyMeter,
      accuracyLevel,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonTripRecordingStartedState (
  val localTripId: String,
  val recordingStartDate: String,
  val startMode: PigeonStartMode

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonTripRecordingStartedState {
      val localTripId = __pigeon_list[0] as String
      val recordingStartDate = __pigeon_list[1] as String
      val startMode = __pigeon_list[2] as PigeonStartMode
      return PigeonTripRecordingStartedState(localTripId, recordingStartDate, startMode)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      localTripId,
      recordingStartDate,
      startMode,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonTripRecordingConfirmedState (
  val localTripId: String,
  val recordingStartDate: String,
  val recordingConfirmationDate: String,
  val startMode: PigeonStartMode

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonTripRecordingConfirmedState {
      val localTripId = __pigeon_list[0] as String
      val recordingStartDate = __pigeon_list[1] as String
      val recordingConfirmationDate = __pigeon_list[2] as String
      val startMode = __pigeon_list[3] as PigeonStartMode
      return PigeonTripRecordingConfirmedState(localTripId, recordingStartDate, recordingConfirmationDate, startMode)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      localTripId,
      recordingStartDate,
      recordingConfirmationDate,
      startMode,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonTripRecordingCanceledState (
  val localTripId: String,
  val recordingStartDate: String,
  val recordingConfirmationDate: String? = null,
  val startMode: PigeonStartMode,
  val cancelationReason: PigeonTripCancelationReason

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonTripRecordingCanceledState {
      val localTripId = __pigeon_list[0] as String
      val recordingStartDate = __pigeon_list[1] as String
      val recordingConfirmationDate = __pigeon_list[2] as String?
      val startMode = __pigeon_list[3] as PigeonStartMode
      val cancelationReason = __pigeon_list[4] as PigeonTripCancelationReason
      return PigeonTripRecordingCanceledState(localTripId, recordingStartDate, recordingConfirmationDate, startMode, cancelationReason)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      localTripId,
      recordingStartDate,
      recordingConfirmationDate,
      startMode,
      cancelationReason,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonTripRecordingFinishedState (
  val localTripId: String,
  val recordingStartDate: String,
  val recordingConfirmationDate: String,
  val startMode: PigeonStartMode,
  val recordingEndDate: String

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonTripRecordingFinishedState {
      val localTripId = __pigeon_list[0] as String
      val recordingStartDate = __pigeon_list[1] as String
      val recordingConfirmationDate = __pigeon_list[2] as String
      val startMode = __pigeon_list[3] as PigeonStartMode
      val recordingEndDate = __pigeon_list[4] as String
      return PigeonTripRecordingFinishedState(localTripId, recordingStartDate, recordingConfirmationDate, startMode, recordingEndDate)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      localTripId,
      recordingStartDate,
      recordingConfirmationDate,
      startMode,
      recordingEndDate,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonCreateTripSharingLinkResponse (
  val status: PigeonCreateTripSharingLinkStatus,
  val data: PigeonTripSharingLink? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonCreateTripSharingLinkResponse {
      val status = __pigeon_list[0] as PigeonCreateTripSharingLinkStatus
      val data = __pigeon_list[1] as PigeonTripSharingLink?
      return PigeonCreateTripSharingLinkResponse(status, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      status,
      data,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonTripSharingLink (
  val code: String,
  val url: String,
  val startDate: String,
  val endDate: String

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonTripSharingLink {
      val code = __pigeon_list[0] as String
      val url = __pigeon_list[1] as String
      val startDate = __pigeon_list[2] as String
      val endDate = __pigeon_list[3] as String
      return PigeonTripSharingLink(code, url, startDate, endDate)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      code,
      url,
      startDate,
      endDate,
    )
  }
}
private object TripAnalysisApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonVehicle.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonTripPoint.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonDKCrashInfo.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonAdvancedEcoDriving.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonAdvancedFuelEstimation.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonAdvancedSafety.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonBrakeWear.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonCall.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonAdvancedEnergyEstimation.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonEnergyEstimation.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonEcoDriving.fromList(it)
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonFuelEstimation.fromList(it)
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonSafety.fromList(it)
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonPollutants.fromList(it)
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonTireWear.fromList(it)
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonDriverDistraction.fromList(it)
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonLogbook.fromList(it)
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonSafetyEvent.fromList(it)
        }
      }
      147.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonSpeedingStatistics.fromList(it)
        }
      }
      148.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonEcoDrivingContext.fromList(it)
        }
      }
      149.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonFuelEstimationContext.fromList(it)
        }
      }
      150.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonSafetyContext.fromList(it)
        }
      }
      151.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonSpeedLimitContext.fromList(it)
        }
      }
      152.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonTripResponseStatus.fromList(it)
        }
      }
      153.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonTripResponseInfoItem.fromList(it)
        }
      }
      154.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonTrip.fromList(it)
        }
      }
      155.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonTripStatistics.fromList(it)
        }
      }
      156.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonTripAdviceData.fromList(it)
        }
      }
      157.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonTripAdviceEvaluation.fromList(it)
        }
      }
      158.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonManeuverData.fromList(it)
        }
      }
      159.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonEvaluationData.fromList(it)
        }
      }
      160.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonDeclaredTransportationMode.fromList(it)
        }
      }
      161.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonCurrentTripInfo.fromList(it)
        }
      }
      162.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonLastTripLocation.fromList(it)
        }
      }
      163.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonTripRecordingStartedState.fromList(it)
        }
      }
      164.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonTripRecordingConfirmedState.fromList(it)
        }
      }
      165.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonTripRecordingCanceledState.fromList(it)
        }
      }
      166.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonTripRecordingFinishedState.fromList(it)
        }
      }
      167.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonCreateTripSharingLinkResponse.fromList(it)
        }
      }
      168.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonTripSharingLink.fromList(it)
        }
      }
      169.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PigeonStartMode.ofRaw(it)
        }
      }
      170.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PigeonCancelTrip.ofRaw(it)
        }
      }
      171.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PigeonState.ofRaw(it)
        }
      }
      172.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PigeonDKCrashFeedbackType.ofRaw(it)
        }
      }
      173.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PigeonDKCrashFeedbackSeverity.ofRaw(it)
        }
      }
      174.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PigeonCrashStatus.ofRaw(it)
        }
      }
      175.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PigeonTripResponseStatusType.ofRaw(it)
        }
      }
      176.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PigeonTripResponseInfo.ofRaw(it)
        }
      }
      177.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PigeonTripResponseError.ofRaw(it)
        }
      }
      178.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PigeonAccuracyLevel.ofRaw(it)
        }
      }
      179.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PigeonTripCancelationReason.ofRaw(it)
        }
      }
      180.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PigeonCreateTripSharingLinkStatus.ofRaw(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PigeonVehicle -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is PigeonTripPoint -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is PigeonDKCrashInfo -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is PigeonAdvancedEcoDriving -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is PigeonAdvancedFuelEstimation -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is PigeonAdvancedSafety -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is PigeonBrakeWear -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is PigeonCall -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is PigeonAdvancedEnergyEstimation -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is PigeonEnergyEstimation -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is PigeonEcoDriving -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      is PigeonFuelEstimation -> {
        stream.write(140)
        writeValue(stream, value.toList())
      }
      is PigeonSafety -> {
        stream.write(141)
        writeValue(stream, value.toList())
      }
      is PigeonPollutants -> {
        stream.write(142)
        writeValue(stream, value.toList())
      }
      is PigeonTireWear -> {
        stream.write(143)
        writeValue(stream, value.toList())
      }
      is PigeonDriverDistraction -> {
        stream.write(144)
        writeValue(stream, value.toList())
      }
      is PigeonLogbook -> {
        stream.write(145)
        writeValue(stream, value.toList())
      }
      is PigeonSafetyEvent -> {
        stream.write(146)
        writeValue(stream, value.toList())
      }
      is PigeonSpeedingStatistics -> {
        stream.write(147)
        writeValue(stream, value.toList())
      }
      is PigeonEcoDrivingContext -> {
        stream.write(148)
        writeValue(stream, value.toList())
      }
      is PigeonFuelEstimationContext -> {
        stream.write(149)
        writeValue(stream, value.toList())
      }
      is PigeonSafetyContext -> {
        stream.write(150)
        writeValue(stream, value.toList())
      }
      is PigeonSpeedLimitContext -> {
        stream.write(151)
        writeValue(stream, value.toList())
      }
      is PigeonTripResponseStatus -> {
        stream.write(152)
        writeValue(stream, value.toList())
      }
      is PigeonTripResponseInfoItem -> {
        stream.write(153)
        writeValue(stream, value.toList())
      }
      is PigeonTrip -> {
        stream.write(154)
        writeValue(stream, value.toList())
      }
      is PigeonTripStatistics -> {
        stream.write(155)
        writeValue(stream, value.toList())
      }
      is PigeonTripAdviceData -> {
        stream.write(156)
        writeValue(stream, value.toList())
      }
      is PigeonTripAdviceEvaluation -> {
        stream.write(157)
        writeValue(stream, value.toList())
      }
      is PigeonManeuverData -> {
        stream.write(158)
        writeValue(stream, value.toList())
      }
      is PigeonEvaluationData -> {
        stream.write(159)
        writeValue(stream, value.toList())
      }
      is PigeonDeclaredTransportationMode -> {
        stream.write(160)
        writeValue(stream, value.toList())
      }
      is PigeonCurrentTripInfo -> {
        stream.write(161)
        writeValue(stream, value.toList())
      }
      is PigeonLastTripLocation -> {
        stream.write(162)
        writeValue(stream, value.toList())
      }
      is PigeonTripRecordingStartedState -> {
        stream.write(163)
        writeValue(stream, value.toList())
      }
      is PigeonTripRecordingConfirmedState -> {
        stream.write(164)
        writeValue(stream, value.toList())
      }
      is PigeonTripRecordingCanceledState -> {
        stream.write(165)
        writeValue(stream, value.toList())
      }
      is PigeonTripRecordingFinishedState -> {
        stream.write(166)
        writeValue(stream, value.toList())
      }
      is PigeonCreateTripSharingLinkResponse -> {
        stream.write(167)
        writeValue(stream, value.toList())
      }
      is PigeonTripSharingLink -> {
        stream.write(168)
        writeValue(stream, value.toList())
      }
      is PigeonStartMode -> {
        stream.write(169)
        writeValue(stream, value.raw)
      }
      is PigeonCancelTrip -> {
        stream.write(170)
        writeValue(stream, value.raw)
      }
      is PigeonState -> {
        stream.write(171)
        writeValue(stream, value.raw)
      }
      is PigeonDKCrashFeedbackType -> {
        stream.write(172)
        writeValue(stream, value.raw)
      }
      is PigeonDKCrashFeedbackSeverity -> {
        stream.write(173)
        writeValue(stream, value.raw)
      }
      is PigeonCrashStatus -> {
        stream.write(174)
        writeValue(stream, value.raw)
      }
      is PigeonTripResponseStatusType -> {
        stream.write(175)
        writeValue(stream, value.raw)
      }
      is PigeonTripResponseInfo -> {
        stream.write(176)
        writeValue(stream, value.raw)
      }
      is PigeonTripResponseError -> {
        stream.write(177)
        writeValue(stream, value.raw)
      }
      is PigeonAccuracyLevel -> {
        stream.write(178)
        writeValue(stream, value.raw)
      }
      is PigeonTripCancelationReason -> {
        stream.write(179)
        writeValue(stream, value.raw)
      }
      is PigeonCreateTripSharingLinkStatus -> {
        stream.write(180)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface AndroidTripAnalysisApi {
  fun isAutoStartActivated(): Boolean
  fun activateAutoStart(activate: Boolean)
  fun isCrashDetectionActivated(): Boolean
  fun activateCrashDetection(activate: Boolean)
  fun startTrip()
  fun stopTrip()
  fun cancelTrip()
  fun isTripRunning(): Boolean
  fun setStopTimeOut(timeOut: Long)
  fun isMonitoringPotentialTripStart(): Boolean
  fun setMonitorPotentialTripStart(activate: Boolean)
  fun setVehicle(vehicle: PigeonVehicle)
  fun getTripMetadata(): Map<String, String>?
  fun updateTripMetadata(key: String, value: String?)
  fun setTripMetadata(metadata: Map<String, String>?)
  fun deleteTripMetadata(key: String)
  fun deleteAllTripMetadata()
  fun getCurrentTripInfo(): PigeonCurrentTripInfo?
  fun getLastTripLocation(): PigeonLastTripLocation?
  fun isTripSharingAvailable(): Boolean
  fun createTripSharingLink(durationInSeconds: Long, callback: (Result<PigeonCreateTripSharingLinkResponse>) -> Unit)

  companion object {
    /** The codec used by AndroidTripAnalysisApi. */
    val codec: MessageCodec<Any?> by lazy {
      TripAnalysisApiPigeonCodec
    }
    /** Sets up an instance of `AndroidTripAnalysisApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: AndroidTripAnalysisApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.isAutoStartActivated$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isAutoStartActivated())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.activateAutoStart$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val activateArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.activateAutoStart(activateArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.isCrashDetectionActivated$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isCrashDetectionActivated())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.activateCrashDetection$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val activateArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.activateCrashDetection(activateArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.startTrip$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.startTrip()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.stopTrip$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.stopTrip()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.cancelTrip$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.cancelTrip()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.isTripRunning$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isTripRunning())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.setStopTimeOut$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val timeOutArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.setStopTimeOut(timeOutArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.isMonitoringPotentialTripStart$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isMonitoringPotentialTripStart())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.setMonitorPotentialTripStart$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val activateArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.setMonitorPotentialTripStart(activateArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.setVehicle$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val vehicleArg = args[0] as PigeonVehicle
            val wrapped: List<Any?> = try {
              api.setVehicle(vehicleArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.getTripMetadata$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getTripMetadata())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.updateTripMetadata$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val keyArg = args[0] as String
            val valueArg = args[1] as String?
            val wrapped: List<Any?> = try {
              api.updateTripMetadata(keyArg, valueArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.setTripMetadata$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val metadataArg = args[0] as Map<String, String>?
            val wrapped: List<Any?> = try {
              api.setTripMetadata(metadataArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.deleteTripMetadata$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val keyArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.deleteTripMetadata(keyArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.deleteAllTripMetadata$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.deleteAllTripMetadata()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.getCurrentTripInfo$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getCurrentTripInfo())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.getLastTripLocation$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getLastTripLocation())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.isTripSharingAvailable$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isTripSharingAvailable())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.createTripSharingLink$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val durationInSecondsArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            api.createTripSharingLink(durationInSecondsArg) { result: Result<PigeonCreateTripSharingLinkResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class FlutterTripAnalysisApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by FlutterTripAnalysisApi. */
    val codec: MessageCodec<Any?> by lazy {
      TripAnalysisApiPigeonCodec
    }
  }
  fun tripRecordingStarted(stateArg: PigeonTripRecordingStartedState, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripRecordingStarted$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(stateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun tripRecordingConfirmed(stateArg: PigeonTripRecordingConfirmedState, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripRecordingConfirmed$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(stateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun tripRecordingCanceled(stateArg: PigeonTripRecordingCanceledState, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripRecordingCanceled$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(stateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun tripRecordingFinished(stateArg: PigeonTripRecordingFinishedState, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripRecordingFinished$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(stateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun tripStarted(startModeArg: PigeonStartMode, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripStarted$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(startModeArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun tripPoint(tripPointArg: PigeonTripPoint, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripPoint$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(tripPointArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun tripSavedForRepost(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripSavedForRepost$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun tripFinished(responseArg: PigeonTripResponseStatus, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripFinished$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(responseArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun tripCancelled(cancelTripArg: PigeonCancelTrip, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripCancelled$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(cancelTripArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun potentialTripStart(startModeArg: PigeonStartMode, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.potentialTripStart$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(startModeArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun beaconDetected(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.beaconDetected$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun sdkStateChanged(stateArg: PigeonState, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.sdkStateChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(stateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun crashDetected(crashInfoArg: PigeonDKCrashInfo, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.crashDetected$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(crashInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun crashFeedbackSent(crashInfoArg: PigeonDKCrashInfo, feedbackTypeArg: PigeonDKCrashFeedbackType, severityArg: PigeonDKCrashFeedbackSeverity, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.crashFeedbackSent$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(crashInfoArg, feedbackTypeArg, severityArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
