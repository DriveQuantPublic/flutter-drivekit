// Autogenerated from Pigeon (v20.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.drivequant.drivekit.flutter.tripanalysis

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterTripAnalysisError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterTripAnalysisError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonVehicle (
  val carTypeIndex: Long,
  val carEngineIndex: Long,
  val carPower: Long,
  val carMass: Long,
  val carGearboxIndex: Long,
  val carConsumption: Double,
  val engineDisplacement: Long,
  val frontTireSize: String,
  val rearTireSize: String,
  val length: Double,
  val width: Double,
  val height: Double,
  val engineCylinderNb: Long,
  val driveWheels: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonVehicle {
      val carTypeIndex = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val carEngineIndex = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      val carPower = __pigeon_list[2].let { num -> if (num is Int) num.toLong() else num as Long }
      val carMass = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val carGearboxIndex = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long }
      val carConsumption = __pigeon_list[5] as Double
      val engineDisplacement = __pigeon_list[6].let { num -> if (num is Int) num.toLong() else num as Long }
      val frontTireSize = __pigeon_list[7] as String
      val rearTireSize = __pigeon_list[8] as String
      val length = __pigeon_list[9] as Double
      val width = __pigeon_list[10] as Double
      val height = __pigeon_list[11] as Double
      val engineCylinderNb = __pigeon_list[12].let { num -> if (num is Int) num.toLong() else num as Long }
      val driveWheels = __pigeon_list[13].let { num -> if (num is Int) num.toLong() else num as Long }
      return PigeonVehicle(carTypeIndex, carEngineIndex, carPower, carMass, carGearboxIndex, carConsumption, engineDisplacement, frontTireSize, rearTireSize, length, width, height, engineCylinderNb, driveWheels)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      carTypeIndex,
      carEngineIndex,
      carPower,
      carMass,
      carGearboxIndex,
      carConsumption,
      engineDisplacement,
      frontTireSize,
      rearTireSize,
      length,
      width,
      height,
      engineCylinderNb,
      driveWheels,
    )
  }
}
private object TripAnalysisApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonVehicle.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PigeonVehicle -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface AndroidTripAnalysisApi {
  fun getPlatformName(): String
  fun activateAutoStart(activate: Boolean)
  fun activateCrashDetection(activate: Boolean)
  fun startTrip()
  fun stopTrip()
  fun cancelTrip()
  fun isTripRunning(): Boolean
  fun setVehicle(vehicle: PigeonVehicle)

  companion object {
    /** The codec used by AndroidTripAnalysisApi. */
    val codec: MessageCodec<Any?> by lazy {
      TripAnalysisApiPigeonCodec
    }
    /** Sets up an instance of `AndroidTripAnalysisApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: AndroidTripAnalysisApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.getPlatformName$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getPlatformName())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.activateAutoStart$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val activateArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.activateAutoStart(activateArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.activateCrashDetection$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val activateArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.activateCrashDetection(activateArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.startTrip$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.startTrip()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.stopTrip$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.stopTrip()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.cancelTrip$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.cancelTrip()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.isTripRunning$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isTripRunning())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.setVehicle$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val vehicleArg = args[0] as PigeonVehicle
            val wrapped: List<Any?> = try {
              api.setVehicle(vehicleArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
