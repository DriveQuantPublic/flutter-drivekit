// Autogenerated from Pigeon (v20.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.drivequant.drivekit.flutter.tripanalysis

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterTripAnalysisError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterTripAnalysisError {
  return FlutterTripAnalysisError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterTripAnalysisError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class PigeonStartMode(val raw: Int) {
  GPS(0),
  BEACON(1),
  MANUAL(2),
  GEOZONE(3),
  BLUETOOTH(4),
  UNKNOWN_BLUETOOTH(5),
  BICYCLE_ACTIVITY(6),
  CONNECTED_CAR(7);

  companion object {
    fun ofRaw(raw: Int): PigeonStartMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonCancelTrip(val raw: Int) {
  USER(0),
  HIGHSPEED(1),
  NO_SPEED(2),
  NO_BEACON(3),
  MISSING_CONFIGURATION(4),
  NO_GPS_DATA(5),
  RESET(6),
  BEACON_NO_SPEED(7),
  BLUETOOTH_DEVICE_NO_SPEED(8);

  companion object {
    fun ofRaw(raw: Int): PigeonCancelTrip? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonState(val raw: Int) {
  INACTIVE(0),
  STARTING(1),
  RUNNING(2),
  STOPPING(3),
  SENDING(4);

  companion object {
    fun ofRaw(raw: Int): PigeonState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonDKCrashFeedbackType(val raw: Int) {
  NO_CRASH(0),
  CRASH_CONFIRMED(1),
  NO_FEEDBACK(2);

  companion object {
    fun ofRaw(raw: Int): PigeonDKCrashFeedbackType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonDKCrashFeedbackSeverity(val raw: Int) {
  NONE(0),
  MINOR(1),
  CRITICAL(2);

  companion object {
    fun ofRaw(raw: Int): PigeonDKCrashFeedbackSeverity? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonCrashStatus(val raw: Int) {
  UNCONFIRMED(0),
  CONFIRMED(1);

  companion object {
    fun ofRaw(raw: Int): PigeonCrashStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonVehicle (
  val carTypeIndex: Long,
  val carEngineIndex: Long,
  val carPower: Long,
  val carMass: Long,
  val carGearboxIndex: Long,
  val carConsumption: Double,
  val carAutoGearboxNumber: Long,
  val engineDisplacement: Long,
  val carPassengers: Long,
  val dqIndex: String? = null,
  val sra: String? = null,
  val frontTireSize: String? = null,
  val rearTireSize: String? = null,
  val length: Double,
  val width: Double,
  val height: Double,
  val engineCylinderNb: Long,
  val driveWheels: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonVehicle {
      val carTypeIndex = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val carEngineIndex = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      val carPower = __pigeon_list[2].let { num -> if (num is Int) num.toLong() else num as Long }
      val carMass = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val carGearboxIndex = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long }
      val carConsumption = __pigeon_list[5] as Double
      val carAutoGearboxNumber = __pigeon_list[6].let { num -> if (num is Int) num.toLong() else num as Long }
      val engineDisplacement = __pigeon_list[7].let { num -> if (num is Int) num.toLong() else num as Long }
      val carPassengers = __pigeon_list[8].let { num -> if (num is Int) num.toLong() else num as Long }
      val dqIndex = __pigeon_list[9] as String?
      val sra = __pigeon_list[10] as String?
      val frontTireSize = __pigeon_list[11] as String?
      val rearTireSize = __pigeon_list[12] as String?
      val length = __pigeon_list[13] as Double
      val width = __pigeon_list[14] as Double
      val height = __pigeon_list[15] as Double
      val engineCylinderNb = __pigeon_list[16].let { num -> if (num is Int) num.toLong() else num as Long }
      val driveWheels = __pigeon_list[17].let { num -> if (num is Int) num.toLong() else num as Long }
      return PigeonVehicle(carTypeIndex, carEngineIndex, carPower, carMass, carGearboxIndex, carConsumption, carAutoGearboxNumber, engineDisplacement, carPassengers, dqIndex, sra, frontTireSize, rearTireSize, length, width, height, engineCylinderNb, driveWheels)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      carTypeIndex,
      carEngineIndex,
      carPower,
      carMass,
      carGearboxIndex,
      carConsumption,
      carAutoGearboxNumber,
      engineDisplacement,
      carPassengers,
      dqIndex,
      sra,
      frontTireSize,
      rearTireSize,
      length,
      width,
      height,
      engineCylinderNb,
      driveWheels,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonTripPoint (
  val latitude: Double,
  val longitude: Double,
  val speed: Double,
  val accuracy: Double,
  val elevation: Double,
  val distance: Double,
  val heading: Double,
  val duration: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonTripPoint {
      val latitude = __pigeon_list[0] as Double
      val longitude = __pigeon_list[1] as Double
      val speed = __pigeon_list[2] as Double
      val accuracy = __pigeon_list[3] as Double
      val elevation = __pigeon_list[4] as Double
      val distance = __pigeon_list[5] as Double
      val heading = __pigeon_list[6] as Double
      val duration = __pigeon_list[7] as Double
      return PigeonTripPoint(latitude, longitude, speed, accuracy, elevation, distance, heading, duration)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      latitude,
      longitude,
      speed,
      accuracy,
      elevation,
      distance,
      heading,
      duration,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonDKCrashInfo (
  val crashId: String? = null,
  val date: Long? = null,
  val status: PigeonCrashStatus? = null,
  val probability: Long,
  val latitude: Double,
  val longitude: Double,
  val velocity: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonDKCrashInfo {
      val crashId = __pigeon_list[0] as String?
      val date = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long? }
      val status = __pigeon_list[2] as PigeonCrashStatus?
      val probability = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val latitude = __pigeon_list[4] as Double
      val longitude = __pigeon_list[5] as Double
      val velocity = __pigeon_list[6] as Double
      return PigeonDKCrashInfo(crashId, date, status, probability, latitude, longitude, velocity)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      crashId,
      date,
      status,
      probability,
      latitude,
      longitude,
      velocity,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonPostGenericResponse (
  val status: Boolean,
  val itinId: String? = null,
  val comments: List<PigeonComment?>,
  val userId: String? = null,
  val itineraryStatistics: PigeonItineraryStatistics? = null,
  val ecoDriving: PigeonEcoDriving? = null,
  val fuelEstimation: PigeonFuelEstimation? = null,
  val safety: PigeonSafety? = null,
  val advancedEcoDriving: PigeonAdvancedEcoDriving? = null,
  val advancedFuelEstimation: PigeonAdvancedFuelEstimation? = null,
  val advancedSafety: PigeonAdvancedSafety? = null,
  val pollutants: PigeonPollutants? = null,
  val tireWear: PigeonTireWear? = null,
  val brakeWear: PigeonBrakeWear? = null,
  val driverDistraction: List<PigeonDriverDistraction?>? = null,
  val itineraryData: PigeonItineraryData? = null,
  val endDate: Long? = null,
  val logbook: PigeonLogbook? = null,
  val safetyEvents: List<PigeonSafetyEvent?>? = null,
  val callEvents: List<PigeonCallEvent?>? = null,
  val speedingEvents: List<PigeonSpeedingEvents?>? = null,
  val speedingStatistics: PigeonSpeedingStatistics? = null,
  val energyEstimation: PigeonEnergyEstimation? = null,
  val advancedEnergyEstimation: List<PigeonAdvancedEnergyEstimation?>? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonPostGenericResponse {
      val status = __pigeon_list[0] as Boolean
      val itinId = __pigeon_list[1] as String?
      val comments = __pigeon_list[2] as List<PigeonComment?>
      val userId = __pigeon_list[3] as String?
      val itineraryStatistics = __pigeon_list[4] as PigeonItineraryStatistics?
      val ecoDriving = __pigeon_list[5] as PigeonEcoDriving?
      val fuelEstimation = __pigeon_list[6] as PigeonFuelEstimation?
      val safety = __pigeon_list[7] as PigeonSafety?
      val advancedEcoDriving = __pigeon_list[8] as PigeonAdvancedEcoDriving?
      val advancedFuelEstimation = __pigeon_list[9] as PigeonAdvancedFuelEstimation?
      val advancedSafety = __pigeon_list[10] as PigeonAdvancedSafety?
      val pollutants = __pigeon_list[11] as PigeonPollutants?
      val tireWear = __pigeon_list[12] as PigeonTireWear?
      val brakeWear = __pigeon_list[13] as PigeonBrakeWear?
      val driverDistraction = __pigeon_list[14] as List<PigeonDriverDistraction?>?
      val itineraryData = __pigeon_list[15] as PigeonItineraryData?
      val endDate = __pigeon_list[16].let { num -> if (num is Int) num.toLong() else num as Long? }
      val logbook = __pigeon_list[17] as PigeonLogbook?
      val safetyEvents = __pigeon_list[18] as List<PigeonSafetyEvent?>?
      val callEvents = __pigeon_list[19] as List<PigeonCallEvent?>?
      val speedingEvents = __pigeon_list[20] as List<PigeonSpeedingEvents?>?
      val speedingStatistics = __pigeon_list[21] as PigeonSpeedingStatistics?
      val energyEstimation = __pigeon_list[22] as PigeonEnergyEstimation?
      val advancedEnergyEstimation = __pigeon_list[23] as List<PigeonAdvancedEnergyEstimation?>?
      return PigeonPostGenericResponse(status, itinId, comments, userId, itineraryStatistics, ecoDriving, fuelEstimation, safety, advancedEcoDriving, advancedFuelEstimation, advancedSafety, pollutants, tireWear, brakeWear, driverDistraction, itineraryData, endDate, logbook, safetyEvents, callEvents, speedingEvents, speedingStatistics, energyEstimation, advancedEnergyEstimation)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      status,
      itinId,
      comments,
      userId,
      itineraryStatistics,
      ecoDriving,
      fuelEstimation,
      safety,
      advancedEcoDriving,
      advancedFuelEstimation,
      advancedSafety,
      pollutants,
      tireWear,
      brakeWear,
      driverDistraction,
      itineraryData,
      endDate,
      logbook,
      safetyEvents,
      callEvents,
      speedingEvents,
      speedingStatistics,
      energyEstimation,
      advancedEnergyEstimation,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonPostGeneric (
  val route: PigeonRoute? = null,
  val vehicle: PigeonVehicle? = null,
  val itineraryData: PigeonItineraryData? = null,
  val metaData: Map<String?, String?>? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonPostGeneric {
      val route = __pigeon_list[0] as PigeonRoute?
      val vehicle = __pigeon_list[1] as PigeonVehicle?
      val itineraryData = __pigeon_list[2] as PigeonItineraryData?
      val metaData = __pigeon_list[3] as Map<String?, String?>?
      return PigeonPostGeneric(route, vehicle, itineraryData, metaData)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      route,
      vehicle,
      itineraryData,
      metaData,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonAdvancedEcoDriving (
  val ecoDrivingContext: List<PigeonEcoDrivingContext?>

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonAdvancedEcoDriving {
      val ecoDrivingContext = __pigeon_list[0] as List<PigeonEcoDrivingContext?>
      return PigeonAdvancedEcoDriving(ecoDrivingContext)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ecoDrivingContext,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonAdvancedFuelEstimation (
  val fuelEstimationContext: List<PigeonFuelEstimationContext?>

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonAdvancedFuelEstimation {
      val fuelEstimationContext = __pigeon_list[0] as List<PigeonFuelEstimationContext?>
      return PigeonAdvancedFuelEstimation(fuelEstimationContext)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      fuelEstimationContext,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonAdvancedSafety (
  val safetyContext: List<PigeonSafetyContext?>

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonAdvancedSafety {
      val safetyContext = __pigeon_list[0] as List<PigeonSafetyContext?>
      return PigeonAdvancedSafety(safetyContext)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      safetyContext,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonBrakeWear (
  val frontBrakeAutonomy: Long,
  val frontBrakeDistance: Long,
  val frontBrakePadWear: Long,
  val frontBrakeTotalWear: Long,
  val frontBrakeWearRate: Long,
  val rearBrakeAutonomy: Long,
  val rearBrakeDistance: Long,
  val rearBrakePadWear: Long,
  val rearBrakeTotalWear: Long,
  val rearBrakeWearRate: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonBrakeWear {
      val frontBrakeAutonomy = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val frontBrakeDistance = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      val frontBrakePadWear = __pigeon_list[2].let { num -> if (num is Int) num.toLong() else num as Long }
      val frontBrakeTotalWear = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val frontBrakeWearRate = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearBrakeAutonomy = __pigeon_list[5].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearBrakeDistance = __pigeon_list[6].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearBrakePadWear = __pigeon_list[7].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearBrakeTotalWear = __pigeon_list[8].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearBrakeWearRate = __pigeon_list[9].let { num -> if (num is Int) num.toLong() else num as Long }
      return PigeonBrakeWear(frontBrakeAutonomy, frontBrakeDistance, frontBrakePadWear, frontBrakeTotalWear, frontBrakeWearRate, rearBrakeAutonomy, rearBrakeDistance, rearBrakePadWear, rearBrakeTotalWear, rearBrakeWearRate)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      frontBrakeAutonomy,
      frontBrakeDistance,
      frontBrakePadWear,
      frontBrakeTotalWear,
      frontBrakeWearRate,
      rearBrakeAutonomy,
      rearBrakeDistance,
      rearBrakePadWear,
      rearBrakeTotalWear,
      rearBrakeWearRate,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonCall (
  val id: Long,
  val start: Double,
  val end: Double,
  val durationS: Long,
  val duration: Long,
  val distanceM: Long,
  val distance: Long,
  val status: String,
  val audioSystem: String,
  val audioInput: String? = null,
  val audioOutput: String? = null,
  val audioName: String? = null,
  val bluetoothClass: Long,
  val forbidden: Boolean

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonCall {
      val id = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val start = __pigeon_list[1] as Double
      val end = __pigeon_list[2] as Double
      val durationS = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val duration = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long }
      val distanceM = __pigeon_list[5].let { num -> if (num is Int) num.toLong() else num as Long }
      val distance = __pigeon_list[6].let { num -> if (num is Int) num.toLong() else num as Long }
      val status = __pigeon_list[7] as String
      val audioSystem = __pigeon_list[8] as String
      val audioInput = __pigeon_list[9] as String?
      val audioOutput = __pigeon_list[10] as String?
      val audioName = __pigeon_list[11] as String?
      val bluetoothClass = __pigeon_list[12].let { num -> if (num is Int) num.toLong() else num as Long }
      val forbidden = __pigeon_list[13] as Boolean
      return PigeonCall(id, start, end, durationS, duration, distanceM, distance, status, audioSystem, audioInput, audioOutput, audioName, bluetoothClass, forbidden)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      start,
      end,
      durationS,
      duration,
      distanceM,
      distance,
      status,
      audioSystem,
      audioInput,
      audioOutput,
      audioName,
      bluetoothClass,
      forbidden,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonCallEvent (
  val time: Double,
  val latitude: Double,
  val longitude: Double,
  val velocity: Double,
  val heading: Double,
  val elevation: Double,
  val distance: Double,
  val type: Long,
  val duration: Long,
  val audioSystem: String,
  val callType: String,
  val index: Long,
  val forbidden: Boolean

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonCallEvent {
      val time = __pigeon_list[0] as Double
      val latitude = __pigeon_list[1] as Double
      val longitude = __pigeon_list[2] as Double
      val velocity = __pigeon_list[3] as Double
      val heading = __pigeon_list[4] as Double
      val elevation = __pigeon_list[5] as Double
      val distance = __pigeon_list[6] as Double
      val type = __pigeon_list[7].let { num -> if (num is Int) num.toLong() else num as Long }
      val duration = __pigeon_list[8].let { num -> if (num is Int) num.toLong() else num as Long }
      val audioSystem = __pigeon_list[9] as String
      val callType = __pigeon_list[10] as String
      val index = __pigeon_list[11].let { num -> if (num is Int) num.toLong() else num as Long }
      val forbidden = __pigeon_list[12] as Boolean
      return PigeonCallEvent(time, latitude, longitude, velocity, heading, elevation, distance, type, duration, audioSystem, callType, index, forbidden)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      time,
      latitude,
      longitude,
      velocity,
      heading,
      elevation,
      distance,
      type,
      duration,
      audioSystem,
      callType,
      index,
      forbidden,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonComment (
  val errorCode: Long,
  val comment: String

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonComment {
      val errorCode = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val comment = __pigeon_list[1] as String
      return PigeonComment(errorCode, comment)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      errorCode,
      comment,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonAdvancedEnergyEstimation (
  val energy: Double,
  val energyConsumption: Double,
  val energyOpti: Double,
  val energyOptiConsumption: Double,
  val duration: Double,
  val distance: Double,
  val contextId: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonAdvancedEnergyEstimation {
      val energy = __pigeon_list[0] as Double
      val energyConsumption = __pigeon_list[1] as Double
      val energyOpti = __pigeon_list[2] as Double
      val energyOptiConsumption = __pigeon_list[3] as Double
      val duration = __pigeon_list[4] as Double
      val distance = __pigeon_list[5] as Double
      val contextId = __pigeon_list[6].let { num -> if (num is Int) num.toLong() else num as Long }
      return PigeonAdvancedEnergyEstimation(energy, energyConsumption, energyOpti, energyOptiConsumption, duration, distance, contextId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      energy,
      energyConsumption,
      energyOpti,
      energyOptiConsumption,
      duration,
      distance,
      contextId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonEnergyEstimation (
  val energy: Double,
  val energyConsumption: Double,
  val energyOpti: Double,
  val energyOptiConsumption: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonEnergyEstimation {
      val energy = __pigeon_list[0] as Double
      val energyConsumption = __pigeon_list[1] as Double
      val energyOpti = __pigeon_list[2] as Double
      val energyOptiConsumption = __pigeon_list[3] as Double
      return PigeonEnergyEstimation(energy, energyConsumption, energyOpti, energyOptiConsumption)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      energy,
      energyConsumption,
      energyOpti,
      energyOptiConsumption,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonItineraryStatistics (
  val tripDuration: Double,
  val drivingDuration: Double,
  val idlingDuration: Double,
  val drivingPercentage: Double,
  val idlingPercentage: Double,
  val distance: Double,
  val speedMean: Double,
  val subdispNb: Long,
  val meteo: Long,
  val day: Boolean,
  val weekDay: Boolean,
  val transportationMode: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonItineraryStatistics {
      val tripDuration = __pigeon_list[0] as Double
      val drivingDuration = __pigeon_list[1] as Double
      val idlingDuration = __pigeon_list[2] as Double
      val drivingPercentage = __pigeon_list[3] as Double
      val idlingPercentage = __pigeon_list[4] as Double
      val distance = __pigeon_list[5] as Double
      val speedMean = __pigeon_list[6] as Double
      val subdispNb = __pigeon_list[7].let { num -> if (num is Int) num.toLong() else num as Long }
      val meteo = __pigeon_list[8].let { num -> if (num is Int) num.toLong() else num as Long }
      val day = __pigeon_list[9] as Boolean
      val weekDay = __pigeon_list[10] as Boolean
      val transportationMode = __pigeon_list[11].let { num -> if (num is Int) num.toLong() else num as Long }
      return PigeonItineraryStatistics(tripDuration, drivingDuration, idlingDuration, drivingPercentage, idlingPercentage, distance, speedMean, subdispNb, meteo, day, weekDay, transportationMode)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      tripDuration,
      drivingDuration,
      idlingDuration,
      drivingPercentage,
      idlingPercentage,
      distance,
      speedMean,
      subdispNb,
      meteo,
      day,
      weekDay,
      transportationMode,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonEcoDriving (
  val score: Double,
  val scoreAccel: Double,
  val scoreMain: Double,
  val scoreDecel: Double,
  val stdDevAccel: Double,
  val stdDevMain: Double,
  val stdDevDecel: Double,
  val energyClass: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonEcoDriving {
      val score = __pigeon_list[0] as Double
      val scoreAccel = __pigeon_list[1] as Double
      val scoreMain = __pigeon_list[2] as Double
      val scoreDecel = __pigeon_list[3] as Double
      val stdDevAccel = __pigeon_list[4] as Double
      val stdDevMain = __pigeon_list[5] as Double
      val stdDevDecel = __pigeon_list[6] as Double
      val energyClass = __pigeon_list[7].let { num -> if (num is Int) num.toLong() else num as Long }
      return PigeonEcoDriving(score, scoreAccel, scoreMain, scoreDecel, stdDevAccel, stdDevMain, stdDevDecel, energyClass)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      score,
      scoreAccel,
      scoreMain,
      scoreDecel,
      stdDevAccel,
      stdDevMain,
      stdDevDecel,
      energyClass,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonFuelEstimation (
  val co2Mass: Double,
  val co2Emission: Double,
  val fuelVolume: Double,
  val fuelConsumption: Double,
  val idleFuelVolume: Double,
  val idleFuelPercentage: Double,
  val idleFuelConsumption: Double,
  val idleCo2Emission: Double,
  val idleCo2Mass: Double,
  val engineTempStatus: Boolean,
  val coldFuelVolume: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonFuelEstimation {
      val co2Mass = __pigeon_list[0] as Double
      val co2Emission = __pigeon_list[1] as Double
      val fuelVolume = __pigeon_list[2] as Double
      val fuelConsumption = __pigeon_list[3] as Double
      val idleFuelVolume = __pigeon_list[4] as Double
      val idleFuelPercentage = __pigeon_list[5] as Double
      val idleFuelConsumption = __pigeon_list[6] as Double
      val idleCo2Emission = __pigeon_list[7] as Double
      val idleCo2Mass = __pigeon_list[8] as Double
      val engineTempStatus = __pigeon_list[9] as Boolean
      val coldFuelVolume = __pigeon_list[10] as Double
      return PigeonFuelEstimation(co2Mass, co2Emission, fuelVolume, fuelConsumption, idleFuelVolume, idleFuelPercentage, idleFuelConsumption, idleCo2Emission, idleCo2Mass, engineTempStatus, coldFuelVolume)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      co2Mass,
      co2Emission,
      fuelVolume,
      fuelConsumption,
      idleFuelVolume,
      idleFuelPercentage,
      idleFuelConsumption,
      idleCo2Emission,
      idleCo2Mass,
      engineTempStatus,
      coldFuelVolume,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonSafety (
  val nbAdh: Long,
  val nbAccel: Long,
  val nbDecel: Long,
  val nbAdhCrit: Long,
  val nbAccelCrit: Long,
  val nbDecelCrit: Long,
  val safetyScore: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonSafety {
      val nbAdh = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbAccel = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbDecel = __pigeon_list[2].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbAdhCrit = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbAccelCrit = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbDecelCrit = __pigeon_list[5].let { num -> if (num is Int) num.toLong() else num as Long }
      val safetyScore = __pigeon_list[6] as Double
      return PigeonSafety(nbAdh, nbAccel, nbDecel, nbAdhCrit, nbAccelCrit, nbDecelCrit, safetyScore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      nbAdh,
      nbAccel,
      nbDecel,
      nbAdhCrit,
      nbAccelCrit,
      nbDecelCrit,
      safetyScore,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonPollutants (
  val co: Double,
  val hc: Double,
  val nox: Double,
  val soot: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonPollutants {
      val co = __pigeon_list[0] as Double
      val hc = __pigeon_list[1] as Double
      val nox = __pigeon_list[2] as Double
      val soot = __pigeon_list[3] as Double
      return PigeonPollutants(co, hc, nox, soot)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      co,
      hc,
      nox,
      soot,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonTireWear (
  val frontTireAutonomy: Long,
  val frontTireDistance: Long,
  val frontTireTotalWear: Long,
  val frontTireWear: Long,
  val frontTireWearRate: Long,
  val rearTireAutonomy: Long,
  val rearTireDistance: Long,
  val rearTireTotalWear: Long,
  val rearTireWear: Long,
  val rearTireWearRate: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonTireWear {
      val frontTireAutonomy = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val frontTireDistance = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      val frontTireTotalWear = __pigeon_list[2].let { num -> if (num is Int) num.toLong() else num as Long }
      val frontTireWear = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val frontTireWearRate = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearTireAutonomy = __pigeon_list[5].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearTireDistance = __pigeon_list[6].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearTireTotalWear = __pigeon_list[7].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearTireWear = __pigeon_list[8].let { num -> if (num is Int) num.toLong() else num as Long }
      val rearTireWearRate = __pigeon_list[9].let { num -> if (num is Int) num.toLong() else num as Long }
      return PigeonTireWear(frontTireAutonomy, frontTireDistance, frontTireTotalWear, frontTireWear, frontTireWearRate, rearTireAutonomy, rearTireDistance, rearTireTotalWear, rearTireWear, rearTireWearRate)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      frontTireAutonomy,
      frontTireDistance,
      frontTireTotalWear,
      frontTireWear,
      frontTireWearRate,
      rearTireAutonomy,
      rearTireDistance,
      rearTireTotalWear,
      rearTireWear,
      rearTireWearRate,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonDriverDistraction (
  val nbUnlock: Long,
  val durationUnlock: Double,
  val durationPercentUnlock: Double,
  val distanceUnlock: Double,
  val distancePercentUnlock: Double,
  val score: Double,
  val scoreUnlock: Double? = null,
  val scoreCall: Double? = null,
  val calls: List<PigeonCall?>? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonDriverDistraction {
      val nbUnlock = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val durationUnlock = __pigeon_list[1] as Double
      val durationPercentUnlock = __pigeon_list[2] as Double
      val distanceUnlock = __pigeon_list[3] as Double
      val distancePercentUnlock = __pigeon_list[4] as Double
      val score = __pigeon_list[5] as Double
      val scoreUnlock = __pigeon_list[6] as Double?
      val scoreCall = __pigeon_list[7] as Double?
      val calls = __pigeon_list[8] as List<PigeonCall?>?
      return PigeonDriverDistraction(nbUnlock, durationUnlock, durationPercentUnlock, distanceUnlock, distancePercentUnlock, score, scoreUnlock, scoreCall, calls)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      nbUnlock,
      durationUnlock,
      durationPercentUnlock,
      distanceUnlock,
      distancePercentUnlock,
      score,
      scoreUnlock,
      scoreCall,
      calls,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonItineraryData (
  val startDate: String? = null,
  val endDate: String? = null,
  val departureCity: String? = null,
  val arrivalCity: String? = null,
  val departureAddress: String? = null,
  val arrivalAddress: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonItineraryData {
      val startDate = __pigeon_list[0] as String?
      val endDate = __pigeon_list[1] as String?
      val departureCity = __pigeon_list[2] as String?
      val arrivalCity = __pigeon_list[3] as String?
      val departureAddress = __pigeon_list[4] as String?
      val arrivalAddress = __pigeon_list[5] as String?
      return PigeonItineraryData(startDate, endDate, departureCity, arrivalCity, departureAddress, arrivalAddress)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      startDate,
      endDate,
      departureCity,
      arrivalCity,
      departureAddress,
      arrivalAddress,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonLogbook (
  val status: Long,
  val updateDate: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonLogbook {
      val status = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val updateDate = __pigeon_list[1] as String?
      return PigeonLogbook(status, updateDate)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      status,
      updateDate,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonSafetyEvent (
  val time: Double,
  val longitude: Double,
  val latitude: Double,
  val velocity: Double,
  val heading: Double,
  val elevation: Double,
  val distance: Double,
  val type: Long,
  val level: Long,
  val value: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonSafetyEvent {
      val time = __pigeon_list[0] as Double
      val longitude = __pigeon_list[1] as Double
      val latitude = __pigeon_list[2] as Double
      val velocity = __pigeon_list[3] as Double
      val heading = __pigeon_list[4] as Double
      val elevation = __pigeon_list[5] as Double
      val distance = __pigeon_list[6] as Double
      val type = __pigeon_list[7].let { num -> if (num is Int) num.toLong() else num as Long }
      val level = __pigeon_list[8].let { num -> if (num is Int) num.toLong() else num as Long }
      val value = __pigeon_list[9] as Double
      return PigeonSafetyEvent(time, longitude, latitude, velocity, heading, elevation, distance, type, level, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      time,
      longitude,
      latitude,
      velocity,
      heading,
      elevation,
      distance,
      type,
      level,
      value,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonSpeedingEvents (
  val time: Double,
  val longitude: Double,
  val latitude: Double,
  val type: Double,
  val index: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonSpeedingEvents {
      val time = __pigeon_list[0] as Double
      val longitude = __pigeon_list[1] as Double
      val latitude = __pigeon_list[2] as Double
      val type = __pigeon_list[3] as Double
      val index = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long }
      return PigeonSpeedingEvents(time, longitude, latitude, type, index)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      time,
      longitude,
      latitude,
      type,
      index,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonSpeedingStatistics (
  val distance: Long,
  val duration: Long,
  val speedingDistance: Long,
  val speedingDuration: Long,
  val score: Double,
  val speedLimitContexts: List<PigeonSpeedLimitContext?>

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonSpeedingStatistics {
      val distance = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val duration = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      val speedingDistance = __pigeon_list[2].let { num -> if (num is Int) num.toLong() else num as Long }
      val speedingDuration = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val score = __pigeon_list[4] as Double
      val speedLimitContexts = __pigeon_list[5] as List<PigeonSpeedLimitContext?>
      return PigeonSpeedingStatistics(distance, duration, speedingDistance, speedingDuration, score, speedLimitContexts)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      distance,
      duration,
      speedingDistance,
      speedingDuration,
      score,
      speedLimitContexts,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonRoute (
  val gpsDate: List<Double?>,
  val gpsVelocity: List<Double?>,
  val longitude: List<Double?>,
  val latitude: List<Double?>,
  val gpsElevation: List<Double?>,
  val gpsAccuracy: List<Double?>,
  val gpsHeading: List<Double?>,
  val screenLocked: List<Double?>,
  val activityValue: List<Double?>,
  val roll: List<Long?>,
  val pitch: List<Long?>,
  val yaw: List<Long?>,
  val gyroscopeNormVar: List<Long?>

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonRoute {
      val gpsDate = __pigeon_list[0] as List<Double?>
      val gpsVelocity = __pigeon_list[1] as List<Double?>
      val longitude = __pigeon_list[2] as List<Double?>
      val latitude = __pigeon_list[3] as List<Double?>
      val gpsElevation = __pigeon_list[4] as List<Double?>
      val gpsAccuracy = __pigeon_list[5] as List<Double?>
      val gpsHeading = __pigeon_list[6] as List<Double?>
      val screenLocked = __pigeon_list[7] as List<Double?>
      val activityValue = __pigeon_list[8] as List<Double?>
      val roll = __pigeon_list[9] as List<Long?>
      val pitch = __pigeon_list[10] as List<Long?>
      val yaw = __pigeon_list[11] as List<Long?>
      val gyroscopeNormVar = __pigeon_list[12] as List<Long?>
      return PigeonRoute(gpsDate, gpsVelocity, longitude, latitude, gpsElevation, gpsAccuracy, gpsHeading, screenLocked, activityValue, roll, pitch, yaw, gyroscopeNormVar)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      gpsDate,
      gpsVelocity,
      longitude,
      latitude,
      gpsElevation,
      gpsAccuracy,
      gpsHeading,
      screenLocked,
      activityValue,
      roll,
      pitch,
      yaw,
      gyroscopeNormVar,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonEcoDrivingContext (
  val contextId: Long,
  val distance: Double,
  val duration: Double,
  val efficiencyScore: Double,
  val scoreAccel: Double,
  val scoreMain: Double,
  val scoreDecel: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonEcoDrivingContext {
      val contextId = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val distance = __pigeon_list[1] as Double
      val duration = __pigeon_list[2] as Double
      val efficiencyScore = __pigeon_list[3] as Double
      val scoreAccel = __pigeon_list[4] as Double
      val scoreMain = __pigeon_list[5] as Double
      val scoreDecel = __pigeon_list[6] as Double
      return PigeonEcoDrivingContext(contextId, distance, duration, efficiencyScore, scoreAccel, scoreMain, scoreDecel)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      contextId,
      distance,
      duration,
      efficiencyScore,
      scoreAccel,
      scoreMain,
      scoreDecel,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonFuelEstimationContext (
  val contextId: Long,
  val distance: Double,
  val duration: Double,
  val co2Mass: Double,
  val co2Emission: Double,
  val fuelVolume: Double,
  val fuelConsumption: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonFuelEstimationContext {
      val contextId = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val distance = __pigeon_list[1] as Double
      val duration = __pigeon_list[2] as Double
      val co2Mass = __pigeon_list[3] as Double
      val co2Emission = __pigeon_list[4] as Double
      val fuelVolume = __pigeon_list[5] as Double
      val fuelConsumption = __pigeon_list[6] as Double
      return PigeonFuelEstimationContext(contextId, distance, duration, co2Mass, co2Emission, fuelVolume, fuelConsumption)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      contextId,
      distance,
      duration,
      co2Mass,
      co2Emission,
      fuelVolume,
      fuelConsumption,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonSafetyContext (
  val contextId: Long,
  val distance: Double,
  val duration: Double,
  val nbAdh: Long,
  val nbAccel: Long,
  val nbDecel: Long,
  val nbAdhCrit: Long,
  val nbAccelCrit: Long,
  val nbDecelCrit: Long,
  val safetyScore: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonSafetyContext {
      val contextId = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val distance = __pigeon_list[1] as Double
      val duration = __pigeon_list[2] as Double
      val nbAdh = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbAccel = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbDecel = __pigeon_list[5].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbAdhCrit = __pigeon_list[6].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbAccelCrit = __pigeon_list[7].let { num -> if (num is Int) num.toLong() else num as Long }
      val nbDecelCrit = __pigeon_list[8].let { num -> if (num is Int) num.toLong() else num as Long }
      val safetyScore = __pigeon_list[9] as Double
      return PigeonSafetyContext(contextId, distance, duration, nbAdh, nbAccel, nbDecel, nbAdhCrit, nbAccelCrit, nbDecelCrit, safetyScore)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      contextId,
      distance,
      duration,
      nbAdh,
      nbAccel,
      nbDecel,
      nbAdhCrit,
      nbAccelCrit,
      nbDecelCrit,
      safetyScore,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonSpeedLimitContext (
  val speedLimit: Long,
  val distance: Long,
  val duration: Long,
  val speedingDistance: Long,
  val speedingDuration: Long,
  val score: Double

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonSpeedLimitContext {
      val speedLimit = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val distance = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      val duration = __pigeon_list[2].let { num -> if (num is Int) num.toLong() else num as Long }
      val speedingDistance = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val speedingDuration = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long }
      val score = __pigeon_list[5] as Double
      return PigeonSpeedLimitContext(speedLimit, distance, duration, speedingDistance, speedingDuration, score)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      speedLimit,
      distance,
      duration,
      speedingDistance,
      speedingDuration,
      score,
    )
  }
}
private object TripAnalysisApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonVehicle.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonTripPoint.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonDKCrashInfo.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonPostGenericResponse.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonPostGeneric.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonAdvancedEcoDriving.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonAdvancedFuelEstimation.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonAdvancedSafety.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonBrakeWear.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonCall.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonCallEvent.fromList(it)
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonComment.fromList(it)
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonAdvancedEnergyEstimation.fromList(it)
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonEnergyEstimation.fromList(it)
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonItineraryStatistics.fromList(it)
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonEcoDriving.fromList(it)
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonFuelEstimation.fromList(it)
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonSafety.fromList(it)
        }
      }
      147.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonPollutants.fromList(it)
        }
      }
      148.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonTireWear.fromList(it)
        }
      }
      149.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonDriverDistraction.fromList(it)
        }
      }
      150.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonItineraryData.fromList(it)
        }
      }
      151.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonLogbook.fromList(it)
        }
      }
      152.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonSafetyEvent.fromList(it)
        }
      }
      153.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonSpeedingEvents.fromList(it)
        }
      }
      154.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonSpeedingStatistics.fromList(it)
        }
      }
      155.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonRoute.fromList(it)
        }
      }
      156.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonEcoDrivingContext.fromList(it)
        }
      }
      157.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonFuelEstimationContext.fromList(it)
        }
      }
      158.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonSafetyContext.fromList(it)
        }
      }
      159.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonSpeedLimitContext.fromList(it)
        }
      }
      160.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PigeonStartMode.ofRaw(it)
        }
      }
      161.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PigeonCancelTrip.ofRaw(it)
        }
      }
      162.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PigeonState.ofRaw(it)
        }
      }
      163.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PigeonDKCrashFeedbackType.ofRaw(it)
        }
      }
      164.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PigeonDKCrashFeedbackSeverity.ofRaw(it)
        }
      }
      165.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PigeonCrashStatus.ofRaw(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PigeonVehicle -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is PigeonTripPoint -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is PigeonDKCrashInfo -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is PigeonPostGenericResponse -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is PigeonPostGeneric -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is PigeonAdvancedEcoDriving -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is PigeonAdvancedFuelEstimation -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is PigeonAdvancedSafety -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is PigeonBrakeWear -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is PigeonCall -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is PigeonCallEvent -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      is PigeonComment -> {
        stream.write(140)
        writeValue(stream, value.toList())
      }
      is PigeonAdvancedEnergyEstimation -> {
        stream.write(141)
        writeValue(stream, value.toList())
      }
      is PigeonEnergyEstimation -> {
        stream.write(142)
        writeValue(stream, value.toList())
      }
      is PigeonItineraryStatistics -> {
        stream.write(143)
        writeValue(stream, value.toList())
      }
      is PigeonEcoDriving -> {
        stream.write(144)
        writeValue(stream, value.toList())
      }
      is PigeonFuelEstimation -> {
        stream.write(145)
        writeValue(stream, value.toList())
      }
      is PigeonSafety -> {
        stream.write(146)
        writeValue(stream, value.toList())
      }
      is PigeonPollutants -> {
        stream.write(147)
        writeValue(stream, value.toList())
      }
      is PigeonTireWear -> {
        stream.write(148)
        writeValue(stream, value.toList())
      }
      is PigeonDriverDistraction -> {
        stream.write(149)
        writeValue(stream, value.toList())
      }
      is PigeonItineraryData -> {
        stream.write(150)
        writeValue(stream, value.toList())
      }
      is PigeonLogbook -> {
        stream.write(151)
        writeValue(stream, value.toList())
      }
      is PigeonSafetyEvent -> {
        stream.write(152)
        writeValue(stream, value.toList())
      }
      is PigeonSpeedingEvents -> {
        stream.write(153)
        writeValue(stream, value.toList())
      }
      is PigeonSpeedingStatistics -> {
        stream.write(154)
        writeValue(stream, value.toList())
      }
      is PigeonRoute -> {
        stream.write(155)
        writeValue(stream, value.toList())
      }
      is PigeonEcoDrivingContext -> {
        stream.write(156)
        writeValue(stream, value.toList())
      }
      is PigeonFuelEstimationContext -> {
        stream.write(157)
        writeValue(stream, value.toList())
      }
      is PigeonSafetyContext -> {
        stream.write(158)
        writeValue(stream, value.toList())
      }
      is PigeonSpeedLimitContext -> {
        stream.write(159)
        writeValue(stream, value.toList())
      }
      is PigeonStartMode -> {
        stream.write(160)
        writeValue(stream, value.raw)
      }
      is PigeonCancelTrip -> {
        stream.write(161)
        writeValue(stream, value.raw)
      }
      is PigeonState -> {
        stream.write(162)
        writeValue(stream, value.raw)
      }
      is PigeonDKCrashFeedbackType -> {
        stream.write(163)
        writeValue(stream, value.raw)
      }
      is PigeonDKCrashFeedbackSeverity -> {
        stream.write(164)
        writeValue(stream, value.raw)
      }
      is PigeonCrashStatus -> {
        stream.write(165)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface AndroidTripAnalysisApi {
  fun activateAutoStart(activate: Boolean)
  fun activateCrashDetection(activate: Boolean)
  fun startTrip()
  fun stopTrip()
  fun cancelTrip()
  fun isTripRunning(): Boolean
  fun setMonitorPotentialTripStart(activate: Boolean)
  fun getMonitorPotentialTripStart(): Boolean
  fun setVehicle(vehicle: PigeonVehicle)

  companion object {
    /** The codec used by AndroidTripAnalysisApi. */
    val codec: MessageCodec<Any?> by lazy {
      TripAnalysisApiPigeonCodec
    }
    /** Sets up an instance of `AndroidTripAnalysisApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: AndroidTripAnalysisApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.activateAutoStart$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val activateArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.activateAutoStart(activateArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.activateCrashDetection$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val activateArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.activateCrashDetection(activateArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.startTrip$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.startTrip()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.stopTrip$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.stopTrip()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.cancelTrip$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.cancelTrip()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.isTripRunning$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isTripRunning())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.setMonitorPotentialTripStart$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val activateArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.setMonitorPotentialTripStart(activateArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.getMonitorPotentialTripStart$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getMonitorPotentialTripStart())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pigeon_trip_analysis_package.AndroidTripAnalysisApi.setVehicle$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val vehicleArg = args[0] as PigeonVehicle
            val wrapped: List<Any?> = try {
              api.setVehicle(vehicleArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class FlutterTripAnalysisApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by FlutterTripAnalysisApi. */
    val codec: MessageCodec<Any?> by lazy {
      TripAnalysisApiPigeonCodec
    }
  }
  fun tripStarted(startModeArg: PigeonStartMode, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripStarted$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(startModeArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun tripPoint(tripPointArg: PigeonTripPoint, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripPoint$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(tripPointArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun tripSavedForRepost(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripSavedForRepost$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun tripFinished(postArg: PigeonPostGeneric, responseArg: PigeonPostGenericResponse, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripFinished$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(postArg, responseArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun tripCancelled(cancelTripArg: PigeonCancelTrip, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.tripCancelled$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(cancelTripArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun potentialTripStart(startModeArg: PigeonStartMode, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.potentialTripStart$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(startModeArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun beaconDetected(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.beaconDetected$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun sdkStateChanged(stateArg: PigeonState, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.sdkStateChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(stateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun crashDetected(crashInfoArg: PigeonDKCrashInfo, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.crashDetected$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(crashInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun crashFeedbackSent(crashInfoArg: PigeonDKCrashInfo, feedbackTypeArg: PigeonDKCrashFeedbackType, severityArg: PigeonDKCrashFeedbackSeverity, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.crashFeedbackSent$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(crashInfoArg, feedbackTypeArg, severityArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterTripAnalysisError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
