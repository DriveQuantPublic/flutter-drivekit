// Autogenerated from Pigeon (v20.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class FlutterTripAnalysisError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "FlutterTripAnalysisError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? FlutterTripAnalysisError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterTripAnalysisError {
  return FlutterTripAnalysisError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum PigeonDeleteAccountStatus: Int {
  case success = 0
  case failedToDelete = 1
  case forbidden = 2
}

enum PigeonRequestError: Int {
  case wrongUrl = 0
  case noNetwork = 1
  case unauthenticated = 2
  case forbidden = 3
  case serverError = 4
  case clientError = 5
  case limitReached = 6
  case unknownError = 7
}

enum PigeonUpdateUserIdStatus: Int {
  case updated = 0
  case failedToUpdate = 1
  case invalidUserId = 2
  case alreadyUsed = 3
  case savedForRepost = 4
}

enum PigeonBackgroundFetchStatus: Int {
  case started = 0
  case completed = 1
}
private class IOSTripAnalysisApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      var enumResult: PigeonDeleteAccountStatus? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = PigeonDeleteAccountStatus(rawValue: enumResultAsInt)
      }
      return enumResult
    case 130:
      var enumResult: PigeonRequestError? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = PigeonRequestError(rawValue: enumResultAsInt)
      }
      return enumResult
    case 131:
      var enumResult: PigeonUpdateUserIdStatus? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = PigeonUpdateUserIdStatus(rawValue: enumResultAsInt)
      }
      return enumResult
    case 132:
      var enumResult: PigeonBackgroundFetchStatus? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = PigeonBackgroundFetchStatus(rawValue: enumResultAsInt)
      }
      return enumResult
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class IOSTripAnalysisApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PigeonDeleteAccountStatus {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? PigeonRequestError {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? PigeonUpdateUserIdStatus {
      super.writeByte(131)
      super.writeValue(value.rawValue)
    } else if let value = value as? PigeonBackgroundFetchStatus {
      super.writeByte(132)
      super.writeValue(value.rawValue)
    } else {
      super.writeValue(value)
    }
  }
}

private class IOSTripAnalysisApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return IOSTripAnalysisApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return IOSTripAnalysisApiPigeonCodecWriter(data: data)
  }
}

class IOSTripAnalysisApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = IOSTripAnalysisApiPigeonCodec(readerWriter: IOSTripAnalysisApiPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol IOSTripAnalysisApi {
  func getPlatformName() throws -> String
  func activateAutoStart(activate: Bool) throws
  func activateCrashDetection(activate: Bool) throws
  func startTrip() throws
  func stopTrip() throws
  func cancelTrip() throws
  func isTripRunning() throws -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class IOSTripAnalysisApiSetup {
  static var codec: FlutterStandardMessageCodec { IOSTripAnalysisApiPigeonCodec.shared }
  /// Sets up an instance of `IOSTripAnalysisApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: IOSTripAnalysisApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let getPlatformNameChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_trip_analysis_package.IOSTripAnalysisApi.getPlatformName\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getPlatformNameChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getPlatformName()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getPlatformNameChannel.setMessageHandler(nil)
    }
    let activateAutoStartChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_trip_analysis_package.IOSTripAnalysisApi.activateAutoStart\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      activateAutoStartChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let activateArg = args[0] as! Bool
        do {
          try api.activateAutoStart(activate: activateArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      activateAutoStartChannel.setMessageHandler(nil)
    }
    let activateCrashDetectionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_trip_analysis_package.IOSTripAnalysisApi.activateCrashDetection\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      activateCrashDetectionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let activateArg = args[0] as! Bool
        do {
          try api.activateCrashDetection(activate: activateArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      activateCrashDetectionChannel.setMessageHandler(nil)
    }
    let startTripChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_trip_analysis_package.IOSTripAnalysisApi.startTrip\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startTripChannel.setMessageHandler { _, reply in
        do {
          try api.startTrip()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startTripChannel.setMessageHandler(nil)
    }
    let stopTripChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_trip_analysis_package.IOSTripAnalysisApi.stopTrip\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopTripChannel.setMessageHandler { _, reply in
        do {
          try api.stopTrip()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopTripChannel.setMessageHandler(nil)
    }
    let cancelTripChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_trip_analysis_package.IOSTripAnalysisApi.cancelTrip\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      cancelTripChannel.setMessageHandler { _, reply in
        do {
          try api.cancelTrip()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      cancelTripChannel.setMessageHandler(nil)
    }
    let isTripRunningChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_trip_analysis_package.IOSTripAnalysisApi.isTripRunning\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isTripRunningChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isTripRunning()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isTripRunningChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol FlutterTripAnalysisApiProtocol {
  func driveKitDidConnect(completion: @escaping (Result<Void, FlutterTripAnalysisError>) -> Void)
  func driveKitDidDisconnect(completion: @escaping (Result<Void, FlutterTripAnalysisError>) -> Void)
  func driveKitDidReceiveAuthenticationError(error errorArg: PigeonRequestError, completion: @escaping (Result<Void, FlutterTripAnalysisError>) -> Void)
  func userIdUpdateStatusChanged(status statusArg: PigeonUpdateUserIdStatus, userId userIdArg: String?, completion: @escaping (Result<Void, FlutterTripAnalysisError>) -> Void)
  func driveKitAccountDeletionCompleted(status statusArg: PigeonDeleteAccountStatus, completion: @escaping (Result<Void, FlutterTripAnalysisError>) -> Void)
  func driveKitBackgroundFetchStatusChanged(status statusArg: PigeonBackgroundFetchStatus, completion: @escaping (Result<Void, FlutterTripAnalysisError>) -> Void)
}
class FlutterTripAnalysisApi: FlutterTripAnalysisApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: IOSTripAnalysisApiPigeonCodec {
    return IOSTripAnalysisApiPigeonCodec.shared
  }
  func driveKitDidConnect(completion: @escaping (Result<Void, FlutterTripAnalysisError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.driveKitDidConnect\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterTripAnalysisError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func driveKitDidDisconnect(completion: @escaping (Result<Void, FlutterTripAnalysisError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.driveKitDidDisconnect\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterTripAnalysisError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func driveKitDidReceiveAuthenticationError(error errorArg: PigeonRequestError, completion: @escaping (Result<Void, FlutterTripAnalysisError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.driveKitDidReceiveAuthenticationError\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterTripAnalysisError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func userIdUpdateStatusChanged(status statusArg: PigeonUpdateUserIdStatus, userId userIdArg: String?, completion: @escaping (Result<Void, FlutterTripAnalysisError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.userIdUpdateStatusChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([statusArg, userIdArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterTripAnalysisError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func driveKitAccountDeletionCompleted(status statusArg: PigeonDeleteAccountStatus, completion: @escaping (Result<Void, FlutterTripAnalysisError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.driveKitAccountDeletionCompleted\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([statusArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterTripAnalysisError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func driveKitBackgroundFetchStatusChanged(status statusArg: PigeonBackgroundFetchStatus, completion: @escaping (Result<Void, FlutterTripAnalysisError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.pigeon_trip_analysis_package.FlutterTripAnalysisApi.driveKitBackgroundFetchStatusChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([statusArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterTripAnalysisError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
